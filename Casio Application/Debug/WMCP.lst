SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\calli\Documents\Github\Wireless-Comunication-between-Casio-Calculators\Casio Application\WMCP.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c     1    #include "fxlib.h"
          WMCP.c     2    #include "string.h"
          WMCP.c     3    #include "stdlib.h"
          WMCP.c     4    #include "sh4Compability.h"
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
    00000004 D346                   MOV.L       L1381+6,R3 ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L1381+10,R3; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L1381+14,R2; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L1040:                            
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L1040
    0000004A 000B                   RTS
    0000004C 0009                   NOP
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L1041
    00000072 A005                   BRA         L1042
    00000074 C907                   AND         #7,R0
    00000076              L1041:                            
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L1042:                            
    00000080 994B                   MOV.W       L1381,R9   ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L1381+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L1381+2,R13; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L1381+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L1043
    0000009E 7C36                   ADD         #54,R12
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
    000000AE D221                   MOV.L       L1381+26,R2; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L1377
    000000B8 CB0F                   OR          #15,R0
    000000BA              L1043:                            
    000000BA 2B91                   MOV.W       R9,@R11
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C2 205A                   XOR         R5,R0
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
    000000C8 D31A                   MOV.L       L1381+26,R3; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L1377:                            
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
    000000D8 D317                   MOV.L       L1381+30,R3; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
    000000EC 2B91                   MOV.W       R9,@R11
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
    000000F8 9211                   MOV.W       L1381+4,R2 ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
    00000106 60F0                   MOV.B       @R15,R0
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L1381:                            
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
    0000013C              _KeyDown:                        ; function: KeyDown




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
    00000144 D34F                   MOV.L       L1382+2,R3 ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D24D                   MOV.L       L1382+6,R2 ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L1046
    00000158 D34C                   MOV.L       L1382+10,R3; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
    00000162 E610                   MOV         #16,R6
    00000164 D34A                   MOV.L       L1382+14,R3; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D247                   MOV.L       L1382+18,R2; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L1048
    000001A4 CA01                   XOR         #1,R0
    000001A6              L1046:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A6 61D3                   MOV         R13,R1
    000001A8 D33A                   MOV.L       L1382+18,R3; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D336                   MOV.L       L1382+10,R3; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
    000001C2              L1048:                            
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
    000001D4 D330                   MOV.L       L1382+22,R3; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L1051:                            
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L1052
    000001EC 6EEC                   EXTU.B      R14,R14
    000001EE A004                   BRA         L1050
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L1052:                            
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L1051
    000001FA              L1050:                            
    000001FA 60F0                   MOV.B       @R15,R0
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
          WMCP.c     5    #include "syscall.h"
          WMCP.c     6    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c     7    const unsigned char filledActionButtonBg[] = {
          WMCP.c     8        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
          WMCP.c     9        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c    10        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c    11        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c    12        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c    13        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c    14        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
          WMCP.c    15    };
          WMCP.c    16    const unsigned char actionButtonBg[] = {
          WMCP.c    17        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
          WMCP.c    18        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c    19        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c    20        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c    21        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c    22        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c    23        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
          WMCP.c    24    };
          WMCP.c    25    const unsigned char cancelIcon[] = {
          WMCP.c    26        1, 0, 0, 0, 1,
          WMCP.c    27        0, 1, 0, 1, 0,
          WMCP.c    28        0, 0, 1, 0, 0,
          WMCP.c    29        0, 1, 0, 1, 0,
          WMCP.c    30        1, 0, 0, 0, 1
          WMCP.c    31    };
          WMCP.c    32    const unsigned char confirmIcon[] = {
          WMCP.c    33        0, 0, 0, 0, 1,
          WMCP.c    34        0, 0, 0, 1, 0,
          WMCP.c    35        1, 0, 1, 0, 0,
          WMCP.c    36        0, 1, 0, 0, 0
          WMCP.c    37    };
          WMCP.c    38    const unsigned char proceedIcon[] = {
          WMCP.c    39        0, 0, 0, 0, 1, 0, 0,
          WMCP.c    40        1, 0, 0, 0, 0, 1, 0,
          WMCP.c    41        1, 1, 1, 1, 1, 1, 1,
          WMCP.c    42        1, 0, 0, 0, 0, 1, 0,
          WMCP.c    43        0, 0, 0, 0, 1, 0, 0
          WMCP.c    44    };
          WMCP.c    45    const unsigned char characterSelectionIcon[] = {
          WMCP.c    46        0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,
          WMCP.c    47        1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          WMCP.c    48        1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,
          WMCP.c    49        1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          WMCP.c    50        0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1
          WMCP.c    51    };
          WMCP.c    52    const unsigned char uppercaseToLowercaseIcon[] = {
          WMCP.c    53        0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,
          WMCP.c    54        1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
          WMCP.c    55        1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
          WMCP.c    56        1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1,
          WMCP.c    57        1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1
          WMCP.c    58    };
          WMCP.c    59    
          WMCP.c    60    unsigned int key;
          WMCP.c    61    unsigned int cooldown;
          WMCP.c    62    short size;
          WMCP.c    63    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c    64    char readLength;
          WMCP.c    65    char* readBuffer;
          WMCP.c    66    
          WMCP.c    67    /* itoa:  convert n to characters in s */
          WMCP.c    68    void itoa(int n, char s[]) {
    00000208              _itoa:                           ; function: itoa
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    00000208 2FE6                   MOV.L       R14,@-R15
          WMCP.c    69        int i, j, sign;
          WMCP.c    70        char c;
          WMCP.c    71    
          WMCP.c    72        if ((sign = n) < 0)  /* record sign */
    0000020A 4411                   CMP/PZ      R4
    0000020C 2FD6                   MOV.L       R13,@-R15
    0000020E 6E53                   MOV         R5,R14
    00000210 2FC6                   MOV.L       R12,@-R15
    00000212 4F22                   STS.L       PR,@-R15
    00000214 8D01                   BT/S        L1055
    00000216 6743                   MOV         R4,R7
          WMCP.c    73            n = -n;          /* make n positive */
    00000218 644B                   NEG         R4,R4
    0000021A              L1055:                            
          WMCP.c    74        i = 0;
    0000021A EC00                   MOV         #0,R12
    0000021C 66C3                   MOV         R12,R6
    0000021E E50A                   MOV         #10,R5
          WMCP.c    75        do {       /* generate digits in reverse order */
    00000220              L1056:                            
          WMCP.c    76             s[i++] = n % 10 + '0';   /* get next digit */
    00000220 D31A                   MOV.L       L1382+10,R3; __modls
    00000222 6263                   MOV         R6,R2
    00000224 7601                   ADD         #1,R6
    00000226 32EC                   ADD         R14,R2
    00000228 6143                   MOV         R4,R1
    0000022A 430B                   JSR         @R3
    0000022C 6053                   MOV         R5,R0
    0000022E 7030                   ADD         #48,R0
    00000230 2200                   MOV.B       R0,@R2
          WMCP.c    77        } while ((n /= 10) > 0);     /* delete it */
    00000232 6053                   MOV         R5,R0
    00000234 D217                   MOV.L       L1382+18,R2; __divls
    00000236 420B                   JSR         @R2
    00000238 6143                   MOV         R4,R1
    0000023A 4015                   CMP/PL      R0
    0000023C 8DF0                   BT/S        L1056
    0000023E 6403                   MOV         R0,R4
          WMCP.c    78        if (sign < 0)
    00000240 4711                   CMP/PZ      R7
    00000242 8903                   BT          L1057
          WMCP.c    79            s[i++] = '-';
    00000244 6063                   MOV         R6,R0
    00000246 7601                   ADD         #1,R6
    00000248 E32D                   MOV         #45,R3
    0000024A 0E34                   MOV.B       R3,@(R0,R14)
    0000024C              L1057:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c    80        s[i] = '\0';
          WMCP.c    81        for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
    0000024C D213                   MOV.L       L1382+26,R2; _strlen
    0000024E 6063                   MOV         R6,R0
    00000250 0EC4                   MOV.B       R12,@(R0,R14)
    00000252 6DC3                   MOV         R12,R13
    00000254 420B                   JSR         @R2
    00000256 64E3                   MOV         R14,R4
    00000258 6403                   MOV         R0,R4
    0000025A 74FF                   ADD         #-1,R4
    0000025C 4415                   CMP/PL      R4
    0000025E 8B0B                   BF          L1058
    00000260              L1059:                            
          WMCP.c    82            c = s[i];
    00000260 65D3                   MOV         R13,R5
    00000262 35EC                   ADD         R14,R5
    00000264 6750                   MOV.B       @R5,R7
          WMCP.c    83            s[i] = s[j];
    00000266 6643                   MOV         R4,R6
    00000268 36EC                   ADD         R14,R6
    0000026A 7D01                   ADD         #1,R13
    0000026C 6260                   MOV.B       @R6,R2
    0000026E 74FF                   ADD         #-1,R4
    00000270 2520                   MOV.B       R2,@R5
    00000272 3D43                   CMP/GE      R4,R13
    00000274 8FF4                   BF/S        L1059
          WMCP.c    84            s[j] = c;
    00000276 2670                   MOV.B       R7,@R6
    00000278              L1058:                            
          WMCP.c    85        }
          WMCP.c    86    }
    00000278 4F26                   LDS.L       @R15+,PR
    0000027A 6CF6                   MOV.L       @R15+,R12
    0000027C 6DF6                   MOV.L       @R15+,R13
    0000027E 000B                   RTS
    00000280 6EF6                   MOV.L       @R15+,R14
    00000282              L1382:                            
    00000282 0000                   .DATA.W     0
    00000284 A44B0000               .DATA.L     H'A44B0000
    00000288 02020000               .DATA.L     H'02020000
    0000028C <00000000>             .DATA.L     __modls
    00000290 <00000000>             .DATA.L     _memcpy
    00000294 <00000000>             .DATA.L     __divls
    00000298 <00000000>             .DATA.L     _GetKey
    0000029C <00000000>             .DATA.L     _strlen
          WMCP.c    87    
          WMCP.c    88    void drawTitleBar(const char* menuTitle) {
    000002A0              _drawTitleBar:                   ; function: drawTitleBar
                                                           ; frame size=32
    000002A0 2FE6                   MOV.L       R14,@-R15
    000002A2 2FD6                   MOV.L       R13,@-R15
    000002A4 2FC6                   MOV.L       R12,@-R15
          WMCP.c    89        int x, xStart, y;
          WMCP.c    90    
          WMCP.c    91        for (x = 0; x < 128; x++) {
    000002A6 EC0B                   MOV         #11,R12
    000002A8 2FB6                   MOV.L       R11,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002AA EB00                   MOV         #0,R11
    000002AC 2FA6                   MOV.L       R10,@-R15
    000002AE 6DB3                   MOV         R11,R13
    000002B0 2F96                   MOV.L       R9,@-R15
    000002B2 4F22                   STS.L       PR,@-R15
    000002B4 2F46                   MOV.L       R4,@-R15
    000002B6 D93F                   MOV.L       L1383+2,R9 ; _Bdisp_SetPoint_VRAM
    000002B8 9A7B                   MOV.W       L1383,R10  ; H'0080
    000002BA              L1060:                            
          WMCP.c    92            for (y = 0; y < 11; y++) {
    000002BA 6EB3                   MOV         R11,R14
    000002BC              L1061:                            
          WMCP.c    93                Bdisp_SetPoint_VRAM(x, y, 1);
    000002BC E601                   MOV         #1,R6
    000002BE 65E3                   MOV         R14,R5
    000002C0 490B                   JSR         @R9
    000002C2 64D3                   MOV         R13,R4
    000002C4 7E01                   ADD         #1,R14
    000002C6 3EC3                   CMP/GE      R12,R14
    000002C8 8BF8                   BF          L1061
    000002CA 7D01                   ADD         #1,R13
    000002CC 3DA3                   CMP/GE      R10,R13
    000002CE 8BF4                   BF          L1060
          WMCP.c    94            }
          WMCP.c    95        }
          WMCP.c    96    
          WMCP.c    97        xStart = 63 - strlen(menuTitle) * 3;
    000002D0 D339                   MOV.L       L1383+6,R3 ; _strlen
    000002D2 430B                   JSR         @R3
    000002D4 64F2                   MOV.L       @R15,R4
    000002D6 6303                   MOV         R0,R3
          WMCP.c    98        PrintXY(xStart, 2, menuTitle, 1);
    000002D8 66F2                   MOV.L       @R15,R6
    000002DA E502                   MOV         #2,R5
    000002DC 4000                   SHLL        R0
    000002DE 303C                   ADD         R3,R0
    000002E0 D336                   MOV.L       L1383+10,R3; _PrintXY
    000002E2 600B                   NEG         R0,R0
    000002E4 6403                   MOV         R0,R4
    000002E6 743F                   ADD         #63,R4
    000002E8 E701                   MOV         #1,R7
    000002EA 7F04                   ADD         #4,R15
    000002EC 4F26                   LDS.L       @R15+,PR
    000002EE 69F6                   MOV.L       @R15+,R9
    000002F0 6AF6                   MOV.L       @R15+,R10
    000002F2 6BF6                   MOV.L       @R15+,R11
    000002F4 6CF6                   MOV.L       @R15+,R12
    000002F6 6DF6                   MOV.L       @R15+,R13
    000002F8 432B                   JMP         @R3
    000002FA 6EF6                   MOV.L       @R15+,R14
          WMCP.c    99    }
          WMCP.c   100    void drawPatern(int x, int y, int width, int height, const unsigned char* data, char reverse) {
    000002FC              _drawPatern:                     ; function: drawPatern
                                                           ; frame size=48
    000002FC 2FE6                   MOV.L       R14,@-R15
    000002FE 2FD6                   MOV.L       R13,@-R15
    00000300 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000302 2FB6                   MOV.L       R11,@-R15
    00000304 2FA6                   MOV.L       R10,@-R15
    00000306 6A63                   MOV         R6,R10
    00000308 2F96                   MOV.L       R9,@-R15
    0000030A 2F86                   MOV.L       R8,@-R15
    0000030C 4F22                   STS.L       PR,@-R15
    0000030E 4F12                   STS.L       MACL,@-R15
    00000310 7FF4                   ADD         #-12,R15
    00000312 1F42                   MOV.L       R4,@(8,R15)
    00000314 1F51                   MOV.L       R5,@(4,R15)
    00000316 2F72                   MOV.L       R7,@R15
          WMCP.c   101        int i, j;
          WMCP.c   102        for (i = 0; i < width; i++) {
    00000318 A024                   BRA         L1062
    0000031A E900                   MOV         #0,R9
    0000031C              L1063:                            
    0000031C 5EF1                   MOV.L       @(4,R15),R14
          WMCP.c   103            for (j = 0; j < height; j++) {
    0000031E EB00                   MOV         #0,R11
    00000320 53FC                   MOV.L       @(48,R15),R3
    00000322 0AB7                   MUL.L       R11,R10
    00000324 58F2                   MOV.L       @(8,R15),R8
    00000326 041A                   STS         MACL,R4
    00000328 62F2                   MOV.L       @R15,R2
    0000032A 349C                   ADD         R9,R4
    0000032C 343C                   ADD         R3,R4
    0000032E 6D43                   MOV         R4,R13
    00000330 6C43                   MOV         R4,R12
    00000332 4215                   CMP/PL      R2
    00000334 8F15                   BF/S        L1064
    00000336 389C                   ADD         R9,R8
    00000338              L1065:                            
          WMCP.c   104                Bdisp_SetPoint_VRAM(x + i, y + j, reverse ? !data[j*width+i] : data[j*width+i]);
    00000338 E037                   MOV         #55,R0
    0000033A 03FC                   MOV.B       @(R0,R15),R3
    0000033C 2338                   TST         R3,R3
    0000033E 8D04                   BT/S        L1066
    00000340 65E3                   MOV         R14,R5
    00000342 66C0                   MOV.B       @R12,R6
    00000344 2668                   TST         R6,R6
    00000346 A002                   BRA         L1068
    00000348 0629                   MOVT        R6
    0000034A              L1066:                            
    0000034A 66D0                   MOV.B       @R13,R6
    0000034C 666C                   EXTU.B      R6,R6
    0000034E              L1068:                            
    0000034E D219                   MOV.L       L1383+2,R2 ; _Bdisp_SetPoint_VRAM
    00000350 420B                   JSR         @R2
    00000352 6483                   MOV         R8,R4
    00000354 63F2                   MOV.L       @R15,R3
    00000356 7B01                   ADD         #1,R11
    00000358 7E01                   ADD         #1,R14
    0000035A 3DAC                   ADD         R10,R13
    0000035C 3B33                   CMP/GE      R3,R11
    0000035E 8FEB                   BF/S        L1065
    00000360 3CAC                   ADD         R10,R12
    00000362              L1064:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000362 7901                   ADD         #1,R9
    00000364              L1062:                            
    00000364 39A3                   CMP/GE      R10,R9
    00000366 8BD9                   BF          L1063
          WMCP.c   105            }
          WMCP.c   106        }
          WMCP.c   107    }
    00000368 7F0C                   ADD         #12,R15
    0000036A 4F16                   LDS.L       @R15+,MACL
    0000036C 4F26                   LDS.L       @R15+,PR
    0000036E 68F6                   MOV.L       @R15+,R8
    00000370 69F6                   MOV.L       @R15+,R9
    00000372 6AF6                   MOV.L       @R15+,R10
    00000374 6BF6                   MOV.L       @R15+,R11
    00000376 6CF6                   MOV.L       @R15+,R12
    00000378 6DF6                   MOV.L       @R15+,R13
    0000037A 000B                   RTS
    0000037C 6EF6                   MOV.L       @R15+,R14
          WMCP.c   108    
          WMCP.c   109    const char* handleKeyboard(unsigned int _key, int keyState, int uppercase) {
    0000037E              _handleKeyboard:                 ; function: handleKeyboard
                                                           ; frame size=0
          WMCP.c   110        if (keyState == 0) {
    0000037E 2558                   TST         R5,R5
    00000380 8901                   BT          L1384
    00000382 A0BF                   BRA         L1069
    00000384 0009                   NOP
    00000386              L1384:                            
          WMCP.c   111            if (_key == KEY_CHAR_0) { return "0"; }
    00000386 6043                   MOV         R4,R0
    00000388 8847                   CMP/EQ      #71,R0
    0000038A 8B02                   BF          L1070
    0000038C D00C                   MOV.L       L1383+14,R0; L471
    0000038E 000B                   RTS
    00000390 0009                   NOP
    00000392              L1070:                            
          WMCP.c   112            if (_key == KEY_CHAR_1) { return "1"; }
    00000392 8848                   CMP/EQ      #72,R0
    00000394 8B02                   BF          L1072
    00000396 D00B                   MOV.L       L1383+18,R0; L473
    00000398 000B                   RTS
    0000039A 0009                   NOP
    0000039C              L1072:                            
          WMCP.c   113            if (_key == KEY_CHAR_2) { return "2"; }
    0000039C 6043                   MOV         R4,R0
    0000039E 883E                   CMP/EQ      #62,R0
    000003A0 8B02                   BF          L1073
    000003A2 D009                   MOV.L       L1383+22,R0; L475
    000003A4 000B                   RTS
    000003A6 0009                   NOP
    000003A8              L1073:                            
          WMCP.c   114            if (_key == KEY_CHAR_3) { return "3"; }
    000003A8 8834                   CMP/EQ      #52,R0
    000003AA 8B11                   BF          L1074
    000003AC D007                   MOV.L       L1383+26,R0; L477
    000003AE 000B                   RTS
    000003B0 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B2              L1383:                            
    000003B2 0080                   .DATA.W     H'0080
    000003B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000003B8 <00000000>             .DATA.L     _strlen
    000003BC <00000000>             .DATA.L     _PrintXY
    000003C0 <00000000>             .DATA.L     L471
    000003C4 <00000000>             .DATA.L     L473
    000003C8 <00000000>             .DATA.L     L475
    000003CC <00000000>             .DATA.L     L477
    000003D0              L1074:                            
          WMCP.c   115            if (_key == KEY_CHAR_4) { return "4"; }
    000003D0 6043                   MOV         R4,R0
    000003D2 8849                   CMP/EQ      #73,R0
    000003D4 8B02                   BF          L1075
    000003D6 D030                   MOV.L       L1385+2,R0 ; L479
    000003D8 000B                   RTS
    000003DA 0009                   NOP
    000003DC              L1075:                            
          WMCP.c   116            if (_key == KEY_CHAR_5) { return "5"; }
    000003DC 883F                   CMP/EQ      #63,R0
    000003DE 8B02                   BF          L1076
    000003E0 D02E                   MOV.L       L1385+6,R0 ; L481
    000003E2 000B                   RTS
    000003E4 0009                   NOP
    000003E6              L1076:                            
          WMCP.c   117            if (_key == KEY_CHAR_6) { return "6"; }
    000003E6 6043                   MOV         R4,R0
    000003E8 8835                   CMP/EQ      #53,R0
    000003EA 8B02                   BF          L1077
    000003EC D02C                   MOV.L       L1385+10,R0; L483
    000003EE 000B                   RTS
    000003F0 0009                   NOP
    000003F2              L1077:                            
          WMCP.c   118            if (_key == KEY_CHAR_7) { return "7"; }
    000003F2 884A                   CMP/EQ      #74,R0
    000003F4 8B02                   BF          L1078
    000003F6 D02B                   MOV.L       L1385+14,R0; L485
    000003F8 000B                   RTS
    000003FA 0009                   NOP
    000003FC              L1078:                            
          WMCP.c   119            if (_key == KEY_CHAR_8) { return "8"; }
    000003FC 6043                   MOV         R4,R0
    000003FE 8840                   CMP/EQ      #64,R0
    00000400 8B02                   BF          L1079
    00000402 D029                   MOV.L       L1385+18,R0; L487
    00000404 000B                   RTS
    00000406 0009                   NOP
    00000408              L1079:                            
          WMCP.c   120            if (_key == KEY_CHAR_9) { return "9"; }
    00000408 8836                   CMP/EQ      #54,R0
    0000040A 8B02                   BF          L1080
    0000040C D027                   MOV.L       L1385+22,R0; L489
    0000040E 000B                   RTS
    00000410 0009                   NOP
    00000412              L1080:                            
          WMCP.c   121            if (_key == KEY_CHAR_DP) { return "."; }
    00000412 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000414 883D                   CMP/EQ      #61,R0
    00000416 8B02                   BF          L1081
    00000418 D025                   MOV.L       L1385+26,R0; L491
    0000041A 000B                   RTS
    0000041C 0009                   NOP
    0000041E              L1081:                            
          WMCP.c   122            if (_key == KEY_CHAR_EXP) { return "\x0F"; }
    0000041E 8833                   CMP/EQ      #51,R0
    00000420 8B02                   BF          L1082
    00000422 D024                   MOV.L       L1385+30,R0; L493
    00000424 000B                   RTS
    00000426 0009                   NOP
    00000428              L1082:                            
          WMCP.c   123            if (_key == KEY_CHAR_PMINUS) { return "\x87"; }
    00000428 6043                   MOV         R4,R0
    0000042A 8829                   CMP/EQ      #41,R0
    0000042C 8B02                   BF          L1083
    0000042E D022                   MOV.L       L1385+34,R0; L495
    00000430 000B                   RTS
    00000432 0009                   NOP
    00000434              L1083:                            
          WMCP.c   124            if (_key == KEY_CHAR_PLUS) { return "+"; }
    00000434 882A                   CMP/EQ      #42,R0
    00000436 8B02                   BF          L1084
    00000438 D020                   MOV.L       L1385+38,R0; L497
    0000043A 000B                   RTS
    0000043C 0009                   NOP
    0000043E              L1084:                            
          WMCP.c   125            if (_key == KEY_CHAR_MINUS) { return "-"; }
    0000043E 6043                   MOV         R4,R0
    00000440 8820                   CMP/EQ      #32,R0
    00000442 8B02                   BF          L1085
    00000444 D01E                   MOV.L       L1385+42,R0; L499
    00000446 000B                   RTS
    00000448 0009                   NOP
    0000044A              L1085:                            
          WMCP.c   126            if (_key == KEY_CHAR_MULT) { return "\xA9"; }
    0000044A 882B                   CMP/EQ      #43,R0
    0000044C 8B02                   BF          L1086
    0000044E D01D                   MOV.L       L1385+46,R0; L501
    00000450 000B                   RTS
    00000452 0009                   NOP
    00000454              L1086:                            
          WMCP.c   127            if (_key == KEY_CHAR_DIV) { return "\xB9"; }
    00000454 6043                   MOV         R4,R0
    00000456 8821                   CMP/EQ      #33,R0
    00000458 8B02                   BF          L1087
    0000045A D01B                   MOV.L       L1385+50,R0; L503
    0000045C 000B                   RTS
    0000045E 0009                   NOP
    00000460              L1087:                            
          WMCP.c   128            if (_key == KEY_CHAR_FRAC) { return "/"; }
    00000460 884B                   CMP/EQ      #75,R0
    00000462 8B02                   BF          L1088
    00000464 D019                   MOV.L       L1385+54,R0; L505
    00000466 000B                   RTS
    00000468 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000046A              L1088:                            
          WMCP.c   129            if (_key == KEY_CHAR_LPAR) { return "("; }
    0000046A 6043                   MOV         R4,R0
    0000046C 8837                   CMP/EQ      #55,R0
    0000046E 8B02                   BF          L1089
    00000470 D017                   MOV.L       L1385+58,R0; L507
    00000472 000B                   RTS
    00000474 0009                   NOP
    00000476              L1089:                            
          WMCP.c   130            if (_key == KEY_CHAR_RPAR) { return ")"; }
    00000476 882D                   CMP/EQ      #45,R0
    00000478 8B02                   BF          L1090
    0000047A D016                   MOV.L       L1385+62,R0; L509
    0000047C 000B                   RTS
    0000047E 0009                   NOP
    00000480              L1090:                            
          WMCP.c   131            if (_key == KEY_CHAR_COMMA) { return ","; }
    00000480 6043                   MOV         R4,R0
    00000482 8823                   CMP/EQ      #35,R0
    00000484 8B02                   BF          L1091
    00000486 D014                   MOV.L       L1385+66,R0; L511
    00000488 000B                   RTS
    0000048A 0009                   NOP
    0000048C              L1091:                            
          WMCP.c   132            if (_key == KEY_CHAR_STORE) { return "\xE6\x91"; }
    0000048C 8819                   CMP/EQ      #25,R0
    0000048E 8B27                   BF          L1092
    00000490 D012                   MOV.L       L1385+70,R0; L513
    00000492 000B                   RTS
    00000494 0009                   NOP
    00000496              L1385:                            
    00000496 0000                   .DATA.W     0
    00000498 <00000000>             .DATA.L     L479
    0000049C <00000000>             .DATA.L     L481
    000004A0 <00000000>             .DATA.L     L483
    000004A4 <00000000>             .DATA.L     L485
    000004A8 <00000000>             .DATA.L     L487
    000004AC <00000000>             .DATA.L     L489
    000004B0 <00000000>             .DATA.L     L491
    000004B4 <00000000>             .DATA.L     L493
    000004B8 <00000000>             .DATA.L     L495
    000004BC <00000000>             .DATA.L     L497
    000004C0 <00000000>             .DATA.L     L499
    000004C4 <00000000>             .DATA.L     L501
    000004C8 <00000000>             .DATA.L     L503
    000004CC <00000000>             .DATA.L     L505
    000004D0 <00000000>             .DATA.L     L507
    000004D4 <00000000>             .DATA.L     L509
    000004D8 <00000000>             .DATA.L     L511
    000004DC <00000000>             .DATA.L     L513
    000004E0              L1092:                            
          WMCP.c   133            if (_key == KEY_CTRL_XTT) { return "X"; }
    000004E0 925D                   MOV.W       L1386,R2   ; H'7531
    000004E2 3420                   CMP/EQ      R2,R4
    000004E4 8B01                   BF          L1387
    000004E6 A0E9                   BRA         L893
    000004E8 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004EA              L1387:                            
          WMCP.c   134            if (_key == KEY_CHAR_SQUARE) { return "\xE5\xC2"; }
    000004EA 6043                   MOV         R4,R0
    000004EC 8843                   CMP/EQ      #67,R0
    000004EE 8B02                   BF          L1094
    000004F0 D02C                   MOV.L       L1386+6,R0 ; L517
    000004F2 000B                   RTS
    000004F4 0009                   NOP
    000004F6              L1094:                            
          WMCP.c   135            if (_key == KEY_CHAR_POW) { return "^"; }
    000004F6 8839                   CMP/EQ      #57,R0
    000004F8 8901                   BT          L1388
    000004FA A1D6                   BRA         L1096
    000004FC 0009                   NOP
    000004FE              L1388:                            
    000004FE D02A                   MOV.L       L1386+10,R0; L519
    00000500 000B                   RTS
    00000502 0009                   NOP
    00000504              L1069:                            
          WMCP.c   136        } else if (keyState == 1) {
    00000504 974C                   MOV.W       L1386+2,R7 ; H'7F54
    00000506 6053                   MOV         R5,R0
    00000508 8801                   CMP/EQ      #1,R0
    0000050A 8B3D                   BF          L1097
          WMCP.c   137            if (_key == KEY_CHAR_0) { return "\x7F\x50"; }
    0000050C 6043                   MOV         R4,R0
    0000050E 8847                   CMP/EQ      #71,R0
    00000510 8B02                   BF          L1098
    00000512 D026                   MOV.L       L1386+14,R0; L522
    00000514 000B                   RTS
    00000516 0009                   NOP
    00000518              L1098:                            
          WMCP.c   138            if (_key == KEY_CHAR_EQUAL) { return "="; }
    00000518 883D                   CMP/EQ      #61,R0
    0000051A 8B02                   BF          L1099
    0000051C D024                   MOV.L       L1386+18,R0; L524
    0000051E 000B                   RTS
    00000520 0009                   NOP
    00000522              L1099:                            
          WMCP.c   139            if (_key == KEY_CHAR_EXP) { return "\xE6\x4F"; }
    00000522 6043                   MOV         R4,R0
    00000524 8833                   CMP/EQ      #51,R0
    00000526 8B02                   BF          L1100
    00000528 D022                   MOV.L       L1386+22,R0; L526
    0000052A 000B                   RTS
    0000052C 0009                   NOP
    0000052E              L1100:                            
          WMCP.c   140            if (_key == KEY_CHAR_PLUS) { return "["; }
    0000052E 882A                   CMP/EQ      #42,R0
    00000530 8B02                   BF          L1101
    00000532 D021                   MOV.L       L1386+26,R0; L528
    00000534 000B                   RTS
    00000536 0009                   NOP
    00000538              L1101:                            
          WMCP.c   141            if (_key == KEY_CHAR_MINUS) { return "]"; }
    00000538 6043                   MOV         R4,R0
    0000053A 8820                   CMP/EQ      #32,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000053C 8B02                   BF          L1102
    0000053E D01F                   MOV.L       L1386+30,R0; L530
    00000540 000B                   RTS
    00000542 0009                   NOP
    00000544              L1102:                            
          WMCP.c   142            if (_key == KEY_CHAR_MULT) { return "{"; }
    00000544 882B                   CMP/EQ      #43,R0
    00000546 8B02                   BF          L1103
    00000548 D01D                   MOV.L       L1386+34,R0; L532
    0000054A 000B                   RTS
    0000054C 0009                   NOP
    0000054E              L1103:                            
          WMCP.c   143            if (_key == KEY_CHAR_DIV) { return "}"; }
    0000054E 6043                   MOV         R4,R0
    00000550 8821                   CMP/EQ      #33,R0
    00000552 8B02                   BF          L1104
    00000554 D01B                   MOV.L       L1386+38,R0; L534
    00000556 000B                   RTS
    00000558 0009                   NOP
    0000055A              L1104:                            
          WMCP.c   144            if (_key == KEY_CHAR_RPAR) { return "\xE5\xCA"; }
    0000055A 882D                   CMP/EQ      #45,R0
    0000055C 8B02                   BF          L1105
    0000055E D01A                   MOV.L       L1386+42,R0; L536
    00000560 000B                   RTS
    00000562 0009                   NOP
    00000564              L1105:                            
          WMCP.c   145            if (_key == KEY_CHAR_ANGLE) { return "\x7F\x54"; }
    00000564 3470                   CMP/EQ      R7,R4
    00000566 8B02                   BF          L1106
    00000568 D018                   MOV.L       L1386+46,R0; L538
    0000056A 000B                   RTS
    0000056C 0009                   NOP
    0000056E              L1106:                            
          WMCP.c   146            if (_key == KEY_CHAR_LN) { return "\xE6\x65"; }
    0000056E 6043                   MOV         R4,R0
    00000570 8838                   CMP/EQ      #56,R0
    00000572 8B02                   BF          L1107
    00000574 D016                   MOV.L       L1386+50,R0; L540
    00000576 000B                   RTS
    00000578 0009                   NOP
    0000057A              L1107:                            
          WMCP.c   147            if (_key == KEY_CHAR_SQUARE) { return "\x86"; }
    0000057A 8843                   CMP/EQ      #67,R0
    0000057C 8901                   BT          L1389
    0000057E A194                   BRA         L1096
    00000580 0009                   NOP
    00000582              L1389:                            
    00000582 D014                   MOV.L       L1386+54,R0; L542
    00000584 000B                   RTS
    00000586 0009                   NOP
    00000588              L1097:                            
          WMCP.c   148        } else {
          WMCP.c   149            if (_key == KEY_CHAR_0) { if (uppercase) { return "Z"; } else { return "z"; } }
    00000588 6043                   MOV         R4,R0
    0000058A 8847                   CMP/EQ      #71,R0
    0000058C 8B28                   BF          L1110




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000058E 2668                   TST         R6,R6
    00000590 8902                   BT          L1111
    00000592 D011                   MOV.L       L1386+58,R0; L546
    00000594 000B                   RTS
    00000596 0009                   NOP
    00000598              L1111:                            
    00000598 D010                   MOV.L       L1386+62,R0; L548
    0000059A 000B                   RTS
    0000059C 0009                   NOP
    0000059E              L1386:                            
    0000059E 7531                   .DATA.W     H'7531
    000005A0 7F54                   .DATA.W     H'7F54
    000005A2 0000                   .DATA.W     0
    000005A4 <00000000>             .DATA.L     L517
    000005A8 <00000000>             .DATA.L     L519
    000005AC <00000000>             .DATA.L     L522
    000005B0 <00000000>             .DATA.L     L524
    000005B4 <00000000>             .DATA.L     L526
    000005B8 <00000000>             .DATA.L     L528
    000005BC <00000000>             .DATA.L     L530
    000005C0 <00000000>             .DATA.L     L532
    000005C4 <00000000>             .DATA.L     L534
    000005C8 <00000000>             .DATA.L     L536
    000005CC <00000000>             .DATA.L     L538
    000005D0 <00000000>             .DATA.L     L540
    000005D4 <00000000>             .DATA.L     L542
    000005D8 <00000000>             .DATA.L     L546
    000005DC <00000000>             .DATA.L     L548
    000005E0              L1110:                            
          WMCP.c   150            if (_key == KEY_CHAR_1) { if (uppercase) { return "U"; } else { return "u"; } }
    000005E0 8848                   CMP/EQ      #72,R0
    000005E2 8B07                   BF          L1113
    000005E4 2668                   TST         R6,R6
    000005E6 8902                   BT          L1114
    000005E8 D05C                   MOV.L       L1390+2,R0 ; L551
    000005EA 000B                   RTS
    000005EC 0009                   NOP
    000005EE              L1114:                            
    000005EE D05C                   MOV.L       L1390+6,R0 ; L553
    000005F0 000B                   RTS
    000005F2 0009                   NOP
    000005F4              L1113:                            
          WMCP.c   151            if (_key == KEY_CHAR_2) { if (uppercase) { return "V"; } else { return "v"; } }
    000005F4 6043                   MOV         R4,R0
    000005F6 883E                   CMP/EQ      #62,R0
    000005F8 8B07                   BF          L1116
    000005FA 2668                   TST         R6,R6
    000005FC 8902                   BT          L1117
    000005FE D059                   MOV.L       L1390+10,R0; L556
    00000600 000B                   RTS
    00000602 0009                   NOP
    00000604              L1117:                            
    00000604 D058                   MOV.L       L1390+14,R0; L558
    00000606 000B                   RTS
    00000608 0009                   NOP
    0000060A              L1116:                            
          WMCP.c   152            if (_key == KEY_CHAR_3) { if (uppercase) { return "W"; } else { return "w"; } }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000060A 8834                   CMP/EQ      #52,R0
    0000060C 8B07                   BF          L1119
    0000060E 2668                   TST         R6,R6
    00000610 8902                   BT          L1120
    00000612 D056                   MOV.L       L1390+18,R0; L561
    00000614 000B                   RTS
    00000616 0009                   NOP
    00000618              L1120:                            
    00000618 D055                   MOV.L       L1390+22,R0; L563
    0000061A 000B                   RTS
    0000061C 0009                   NOP
    0000061E              L1119:                            
          WMCP.c   153            if (_key == KEY_CHAR_4) { if (uppercase) { return "P"; } else { return "p"; } }
    0000061E 6043                   MOV         R4,R0
    00000620 8849                   CMP/EQ      #73,R0
    00000622 8B07                   BF          L1122
    00000624 2668                   TST         R6,R6
    00000626 8902                   BT          L1123
    00000628 D052                   MOV.L       L1390+26,R0; L566
    0000062A 000B                   RTS
    0000062C 0009                   NOP
    0000062E              L1123:                            
    0000062E D052                   MOV.L       L1390+30,R0; L568
    00000630 000B                   RTS
    00000632 0009                   NOP
    00000634              L1122:                            
          WMCP.c   154            if (_key == KEY_CHAR_5) { if (uppercase) { return "Q"; } else { return "q"; } }
    00000634 883F                   CMP/EQ      #63,R0
    00000636 8B07                   BF          L1125
    00000638 2668                   TST         R6,R6
    0000063A 8902                   BT          L1126
    0000063C D04F                   MOV.L       L1390+34,R0; L571
    0000063E 000B                   RTS
    00000640 0009                   NOP
    00000642              L1126:                            
    00000642 D04F                   MOV.L       L1390+38,R0; L573
    00000644 000B                   RTS
    00000646 0009                   NOP
    00000648              L1125:                            
          WMCP.c   155            if (_key == KEY_CHAR_6) { if (uppercase) { return "R"; } else { return "r"; } }
    00000648 6043                   MOV         R4,R0
    0000064A 8835                   CMP/EQ      #53,R0
    0000064C 8B07                   BF          L1128
    0000064E 2668                   TST         R6,R6
    00000650 8902                   BT          L1129
    00000652 D04C                   MOV.L       L1390+42,R0; L576
    00000654 000B                   RTS
    00000656 0009                   NOP
    00000658              L1129:                            
    00000658 D04B                   MOV.L       L1390+46,R0; L578
    0000065A 000B                   RTS
    0000065C 0009                   NOP
    0000065E              L1128:                            
          WMCP.c   156            if (_key == KEY_CHAR_7) { if (uppercase) { return "M"; } else { return "m"; } }
    0000065E 884A                   CMP/EQ      #74,R0
    00000660 8B07                   BF          L1131
    00000662 2668                   TST         R6,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000664 8902                   BT          L1132
    00000666 D049                   MOV.L       L1390+50,R0; L581
    00000668 000B                   RTS
    0000066A 0009                   NOP
    0000066C              L1132:                            
    0000066C D048                   MOV.L       L1390+54,R0; L583
    0000066E 000B                   RTS
    00000670 0009                   NOP
    00000672              L1131:                            
          WMCP.c   157            if (_key == KEY_CHAR_8) { if (uppercase) { return "N"; } else { return "n"; } }
    00000672 6043                   MOV         R4,R0
    00000674 8840                   CMP/EQ      #64,R0
    00000676 8B07                   BF          L1134
    00000678 2668                   TST         R6,R6
    0000067A 8902                   BT          L1135
    0000067C D045                   MOV.L       L1390+58,R0; L586
    0000067E 000B                   RTS
    00000680 0009                   NOP
    00000682              L1135:                            
    00000682 D045                   MOV.L       L1390+62,R0; L588
    00000684 000B                   RTS
    00000686 0009                   NOP
    00000688              L1134:                            
          WMCP.c   158            if (_key == KEY_CHAR_9) { if (uppercase) { return "O"; } else { return "o"; } }
    00000688 8836                   CMP/EQ      #54,R0
    0000068A 8B07                   BF          L1137
    0000068C 2668                   TST         R6,R6
    0000068E 8902                   BT          L1138
    00000690 D042                   MOV.L       L1390+66,R0; L591
    00000692 000B                   RTS
    00000694 0009                   NOP
    00000696              L1138:                            
    00000696 D042                   MOV.L       L1390+70,R0; L593
    00000698 000B                   RTS
    0000069A 0009                   NOP
    0000069C              L1137:                            
          WMCP.c   159            if (_key == KEY_CHAR_DP) { return " "; }
    0000069C 6043                   MOV         R4,R0
    0000069E 883D                   CMP/EQ      #61,R0
    000006A0 8B02                   BF          L1140
    000006A2 D040                   MOV.L       L1390+74,R0; L595
    000006A4 000B                   RTS
    000006A6 0009                   NOP
    000006A8              L1140:                            
          WMCP.c   160            if (_key == KEY_CHAR_EXP) { return "\""; }
    000006A8 8833                   CMP/EQ      #51,R0
    000006AA 8B02                   BF          L1141
    000006AC D03E                   MOV.L       L1390+78,R0; L597
    000006AE 000B                   RTS
    000006B0 0009                   NOP
    000006B2              L1141:                            
          WMCP.c   161            if (_key == KEY_CHAR_PLUS) { if (uppercase) { return "X"; } else { return "x"; } }
    000006B2 6043                   MOV         R4,R0
    000006B4 882A                   CMP/EQ      #42,R0
    000006B6 8B07                   BF          L1142
    000006B8 2668                   TST         R6,R6
    000006BA 8902                   BT          L1143




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006BC              L893:
    000006BC D03B                   MOV.L       L1390+82,R0; L515
    000006BE 000B                   RTS
    000006C0 0009                   NOP
    000006C2              L1143:                            
    000006C2 D03B                   MOV.L       L1390+86,R0; L601
    000006C4 000B                   RTS
    000006C6 0009                   NOP
    000006C8              L1142:                            
          WMCP.c   162            if (_key == KEY_CHAR_MINUS) { if (uppercase) { return "Y"; } else { return "y"; } }
    000006C8 8820                   CMP/EQ      #32,R0
    000006CA 8B07                   BF          L1145
    000006CC 2668                   TST         R6,R6
    000006CE 8902                   BT          L1146
    000006D0 D038                   MOV.L       L1390+90,R0; L604
    000006D2 000B                   RTS
    000006D4 0009                   NOP
    000006D6              L1146:                            
    000006D6 D038                   MOV.L       L1390+94,R0; L606
    000006D8 000B                   RTS
    000006DA 0009                   NOP
    000006DC              L1145:                            
          WMCP.c   163            if (_key == KEY_CHAR_MULT) { if (uppercase) { return "S"; } else { return "s"; } }
    000006DC 6043                   MOV         R4,R0
    000006DE 882B                   CMP/EQ      #43,R0
    000006E0 8B07                   BF          L1148
    000006E2 2668                   TST         R6,R6
    000006E4 8902                   BT          L1149
    000006E6 D035                   MOV.L       L1390+98,R0; L609
    000006E8 000B                   RTS
    000006EA 0009                   NOP
    000006EC              L1149:                            
    000006EC D034                   MOV.L       L1390+102,R0; L611
    000006EE 000B                   RTS
    000006F0 0009                   NOP
    000006F2              L1148:                            
          WMCP.c   164            if (_key == KEY_CHAR_DIV) { if (uppercase) { return "T"; } else { return "t"; } }
    000006F2 8821                   CMP/EQ      #33,R0
    000006F4 8B07                   BF          L1151
    000006F6 2668                   TST         R6,R6
    000006F8 8902                   BT          L1152
    000006FA D032                   MOV.L       L1390+106,R0; L614
    000006FC 000B                   RTS
    000006FE 0009                   NOP
    00000700              L1152:                            
    00000700 D031                   MOV.L       L1390+110,R0; L616
    00000702 000B                   RTS
    00000704 0009                   NOP
    00000706              L1151:                            
          WMCP.c   165            if (_key == KEY_CHAR_FRAC) { if (uppercase) { return "G"; } else { return "g"; } }
    00000706 6043                   MOV         R4,R0
    00000708 884B                   CMP/EQ      #75,R0
    0000070A 8B07                   BF          L1154
    0000070C 2668                   TST         R6,R6
    0000070E 8902                   BT          L1155
    00000710 D02E                   MOV.L       L1390+114,R0; L619
    00000712 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000714 0009                   NOP
    00000716              L1155:                            
    00000716 D02E                   MOV.L       L1390+118,R0; L621
    00000718 000B                   RTS
    0000071A 0009                   NOP
    0000071C              L1154:                            
          WMCP.c   166            if (_key == KEY_CTRL_FD) { if (uppercase) { return "H"; } else { return "h"; } }
    0000071C 8841                   CMP/EQ      #65,R0
    0000071E 8B07                   BF          L1157
    00000720 2668                   TST         R6,R6
    00000722 8902                   BT          L1158
    00000724 D02B                   MOV.L       L1390+122,R0; L624
    00000726 000B                   RTS
    00000728 0009                   NOP
    0000072A              L1158:                            
    0000072A D02B                   MOV.L       L1390+126,R0; L626
    0000072C 000B                   RTS
    0000072E 0009                   NOP
    00000730              L1157:                            
          WMCP.c   167            if (_key == KEY_CHAR_LPAR) { if (uppercase) { return "I"; } else { return "i"; } }
    00000730 6043                   MOV         R4,R0
    00000732 8837                   CMP/EQ      #55,R0
    00000734 8B07                   BF          L1160
    00000736 2668                   TST         R6,R6
    00000738 8902                   BT          L1161
    0000073A D028                   MOV.L       L1390+130,R0; L629
    0000073C 000B                   RTS
    0000073E 0009                   NOP
    00000740              L1161:                            
    00000740 D027                   MOV.L       L1390+134,R0; L631
    00000742 000B                   RTS
    00000744 0009                   NOP
    00000746              L1160:                            
          WMCP.c   168            if (_key == KEY_CHAR_RPAR) { if (uppercase) { return "J"; } else { return "j"; } }
    00000746 882D                   CMP/EQ      #45,R0
    00000748 8B50                   BF          L1163
    0000074A 2668                   TST         R6,R6
    0000074C 8902                   BT          L1164
    0000074E D025                   MOV.L       L1390+138,R0; L634
    00000750 000B                   RTS
    00000752 0009                   NOP
    00000754              L1164:                            
    00000754 D024                   MOV.L       L1390+142,R0; L636
    00000756 000B                   RTS
    00000758 0009                   NOP
    0000075A              L1390:                            
    0000075A 0000                   .DATA.W     0
    0000075C <00000000>             .DATA.L     L551
    00000760 <00000000>             .DATA.L     L553
    00000764 <00000000>             .DATA.L     L556
    00000768 <00000000>             .DATA.L     L558
    0000076C <00000000>             .DATA.L     L561
    00000770 <00000000>             .DATA.L     L563
    00000774 <00000000>             .DATA.L     L566
    00000778 <00000000>             .DATA.L     L568
    0000077C <00000000>             .DATA.L     L571
    00000780 <00000000>             .DATA.L     L573




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000784 <00000000>             .DATA.L     L576
    00000788 <00000000>             .DATA.L     L578
    0000078C <00000000>             .DATA.L     L581
    00000790 <00000000>             .DATA.L     L583
    00000794 <00000000>             .DATA.L     L586
    00000798 <00000000>             .DATA.L     L588
    0000079C <00000000>             .DATA.L     L591
    000007A0 <00000000>             .DATA.L     L593
    000007A4 <00000000>             .DATA.L     L595
    000007A8 <00000000>             .DATA.L     L597
    000007AC <00000000>             .DATA.L     L515
    000007B0 <00000000>             .DATA.L     L601
    000007B4 <00000000>             .DATA.L     L604
    000007B8 <00000000>             .DATA.L     L606
    000007BC <00000000>             .DATA.L     L609
    000007C0 <00000000>             .DATA.L     L611
    000007C4 <00000000>             .DATA.L     L614
    000007C8 <00000000>             .DATA.L     L616
    000007CC <00000000>             .DATA.L     L619
    000007D0 <00000000>             .DATA.L     L621
    000007D4 <00000000>             .DATA.L     L624
    000007D8 <00000000>             .DATA.L     L626
    000007DC <00000000>             .DATA.L     L629
    000007E0 <00000000>             .DATA.L     L631
    000007E4 <00000000>             .DATA.L     L634
    000007E8 <00000000>             .DATA.L     L636
    000007EC              L1163:                            
          WMCP.c   169            if (_key == KEY_CHAR_COMMA) { if (uppercase) { return "K"; } else { return "k"; } }
    000007EC 6043                   MOV         R4,R0
    000007EE 8823                   CMP/EQ      #35,R0
    000007F0 8B07                   BF          L1166
    000007F2 2668                   TST         R6,R6
    000007F4 8902                   BT          L1167
    000007F6 D02E                   MOV.L       L1391,R0   ; L639
    000007F8 000B                   RTS
    000007FA 0009                   NOP
    000007FC              L1167:                            
    000007FC D02D                   MOV.L       L1391+4,R0 ; L641
    000007FE 000B                   RTS
    00000800 0009                   NOP
    00000802              L1166:                            
          WMCP.c   170            if (_key == KEY_CHAR_STORE) { if (uppercase) { return "L"; } else { return "l"; } }
    00000802 8819                   CMP/EQ      #25,R0
    00000804 8B07                   BF          L1169
    00000806 2668                   TST         R6,R6
    00000808 8902                   BT          L1170
    0000080A D02B                   MOV.L       L1391+8,R0 ; L644
    0000080C 000B                   RTS
    0000080E 0009                   NOP
    00000810              L1170:                            
    00000810 D02A                   MOV.L       L1391+12,R0; L646
    00000812 000B                   RTS
    00000814 0009                   NOP
    00000816              L1169:                            
          WMCP.c   171            if (_key == KEY_CHAR_ANGLE) { if (uppercase) { return "A"; } else { return "a"; } }
    00000816 3470                   CMP/EQ      R7,R4
    00000818 8B07                   BF          L1172




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000081A 2668                   TST         R6,R6
    0000081C 8902                   BT          L1173
    0000081E D028                   MOV.L       L1391+16,R0; L649
    00000820 000B                   RTS
    00000822 0009                   NOP
    00000824              L1173:                            
    00000824 D027                   MOV.L       L1391+20,R0; L651
    00000826 000B                   RTS
    00000828 0009                   NOP
    0000082A              L1172:                            
          WMCP.c   172            if (_key == KEY_CHAR_LOG) { if (uppercase) { return "B"; } else { return "b"; } }
    0000082A 6043                   MOV         R4,R0
    0000082C 8842                   CMP/EQ      #66,R0
    0000082E 8B07                   BF          L1175
    00000830 2668                   TST         R6,R6
    00000832 8902                   BT          L1176
    00000834 D024                   MOV.L       L1391+24,R0; L654
    00000836 000B                   RTS
    00000838 0009                   NOP
    0000083A              L1176:                            
    0000083A D024                   MOV.L       L1391+28,R0; L656
    0000083C 000B                   RTS
    0000083E 0009                   NOP
    00000840              L1175:                            
          WMCP.c   173            if (_key == KEY_CHAR_LN) { if (uppercase) { return "C"; } else { return "c"; } }
    00000840 8838                   CMP/EQ      #56,R0
    00000842 8B07                   BF          L1178
    00000844 2668                   TST         R6,R6
    00000846 8902                   BT          L1179
    00000848 D021                   MOV.L       L1391+32,R0; L659
    0000084A 000B                   RTS
    0000084C 0009                   NOP
    0000084E              L1179:                            
    0000084E D021                   MOV.L       L1391+36,R0; L661
    00000850 000B                   RTS
    00000852 0009                   NOP
    00000854              L1178:                            
          WMCP.c   174            if (_key == KEY_CHAR_SIN) { if (uppercase) { return "D"; } else { return "d"; } }
    00000854 6043                   MOV         R4,R0
    00000856 882E                   CMP/EQ      #46,R0
    00000858 8B07                   BF          L1181
    0000085A 2668                   TST         R6,R6
    0000085C 8902                   BT          L1182
    0000085E D01E                   MOV.L       L1391+40,R0; L664
    00000860 000B                   RTS
    00000862 0009                   NOP
    00000864              L1182:                            
    00000864 D01D                   MOV.L       L1391+44,R0; L666
    00000866 000B                   RTS
    00000868 0009                   NOP
    0000086A              L1181:                            
          WMCP.c   175            if (_key == KEY_CHAR_COS) { if (uppercase) { return "E"; } else { return "e"; } }
    0000086A 8824                   CMP/EQ      #36,R0
    0000086C 8B07                   BF          L1184
    0000086E 2668                   TST         R6,R6
    00000870 8902                   BT          L1185
    00000872 D01B                   MOV.L       L1391+48,R0; L669




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000874 000B                   RTS
    00000876 0009                   NOP
    00000878              L1185:                            
    00000878 D01A                   MOV.L       L1391+52,R0; L671
    0000087A 000B                   RTS
    0000087C 0009                   NOP
    0000087E              L1184:                            
          WMCP.c   176            if (_key == KEY_CHAR_TAN) { if (uppercase) { return "F"; } else { return "f"; } }
    0000087E 6043                   MOV         R4,R0
    00000880 881A                   CMP/EQ      #26,R0
    00000882 8B07                   BF          L1187
    00000884 2668                   TST         R6,R6
    00000886 8902                   BT          L1188
    00000888 D017                   MOV.L       L1391+56,R0; L674
    0000088A 000B                   RTS
    0000088C 0009                   NOP
    0000088E              L1188:                            
    0000088E D017                   MOV.L       L1391+60,R0; L676
    00000890 000B                   RTS
    00000892 0009                   NOP
    00000894              L1187:                            
          WMCP.c   177            if (_key == KEY_CHAR_SQUARE) { return "\xCD"; }
    00000894 8843                   CMP/EQ      #67,R0
    00000896 8B02                   BF          L1190
    00000898 D015                   MOV.L       L1391+64,R0; L678
    0000089A 000B                   RTS
    0000089C 0009                   NOP
    0000089E              L1190:                            
          WMCP.c   178            if (_key == KEY_CHAR_POW) { return "\xE6\x47"; }
    0000089E 6043                   MOV         R4,R0
    000008A0 8839                   CMP/EQ      #57,R0
    000008A2 8B02                   BF          L1096
    000008A4 D013                   MOV.L       L1391+68,R0; L680
    000008A6 000B                   RTS
    000008A8 0009                   NOP
    000008AA              L1096:                            
          WMCP.c   179        }
          WMCP.c   180    
          WMCP.c   181        return "";
    000008AA D013                   MOV.L       L1391+72,R0; L681
          WMCP.c   182    }
    000008AC              L1071:                            
    000008AC 000B                   RTS
    000008AE 0009                   NOP
    000008B0              L1391:                            
    000008B0 <00000000>             .DATA.L     L639
    000008B4 <00000000>             .DATA.L     L641
    000008B8 <00000000>             .DATA.L     L644
    000008BC <00000000>             .DATA.L     L646
    000008C0 <00000000>             .DATA.L     L649
    000008C4 <00000000>             .DATA.L     L651
    000008C8 <00000000>             .DATA.L     L654
    000008CC <00000000>             .DATA.L     L656
    000008D0 <00000000>             .DATA.L     L659
    000008D4 <00000000>             .DATA.L     L661
    000008D8 <00000000>             .DATA.L     L664
    000008DC <00000000>             .DATA.L     L666




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008E0 <00000000>             .DATA.L     L669
    000008E4 <00000000>             .DATA.L     L671
    000008E8 <00000000>             .DATA.L     L674
    000008EC <00000000>             .DATA.L     L676
    000008F0 <00000000>             .DATA.L     L678
    000008F4 <00000000>             .DATA.L     L680
    000008F8 <00000000>             .DATA.L     L681
          WMCP.c   183    const char* handleCharacterSelectionMenu() {
    000008FC              _handleCharacterSelectionMenu:   ; function: handleCharacterSelectionMenu
                                                           ; frame size=2044
                                                           ; used runtime library name:
                                                           ; __quick_mvn, __slow_mvn
    000008FC 2FE6                   MOV.L       R14,@-R15
    000008FE 2FD6                   MOV.L       R13,@-R15
    00000900 2FC6                   MOV.L       R12,@-R15
    00000902 2FB6                   MOV.L       R11,@-R15
    00000904 2FA6                   MOV.L       R10,@-R15
    00000906 2F96                   MOV.L       R9,@-R15
    00000908 2F86                   MOV.L       R8,@-R15
    0000090A 4F22                   STS.L       PR,@-R15
    0000090C 4F12                   STS.L       MACL,@-R15
    0000090E 9075                   MOV.W       L1392,R0   ; H'F838
          WMCP.c   184        const unsigned char submenu1[] = {
          WMCP.c   185            0, 1, 0,
          WMCP.c   186            1, 1, 0,
          WMCP.c   187            0, 1, 0,
          WMCP.c   188            0, 1, 0,
          WMCP.c   189            1, 1, 1
          WMCP.c   190        };
    00000910 9175                   MOV.W       L1392+2,R1 ; H'07B8
    00000912 3F0C                   ADD         R0,R15
    00000914 D23D                   MOV.L       L1392+16,R2; L685
    00000916 31FC                   ADD         R15,R1
    00000918 D33D                   MOV.L       L1392+20,R3; __slow_mvn
    0000091A 430B                   JSR         @R3
    0000091C E00F                   MOV         #15,R0
          WMCP.c   191        const unsigned char submenu2[] = {
          WMCP.c   192            1, 1, 1,
          WMCP.c   193            0, 0, 1,
          WMCP.c   194            1, 1, 1,
          WMCP.c   195            1, 0, 0,
          WMCP.c   196            1, 1, 1
          WMCP.c   197        };
    0000091E 916F                   MOV.W       L1392+4,R1 ; H'07A8
    00000920 D23C                   MOV.L       L1392+24,R2; L687
    00000922 31FC                   ADD         R15,R1
    00000924 D33A                   MOV.L       L1392+20,R3; __slow_mvn
    00000926 430B                   JSR         @R3
    00000928 E00F                   MOV         #15,R0
          WMCP.c   198        const unsigned char submenu3[] = {
          WMCP.c   199            1, 1, 1,
          WMCP.c   200            0, 0, 1,
          WMCP.c   201            1, 1, 1,
          WMCP.c   202            0, 0, 1,
          WMCP.c   203            1, 1, 1
          WMCP.c   204        };
    0000092A 916A                   MOV.W       L1392+6,R1 ; H'0798




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000092C D23A                   MOV.L       L1392+28,R2; L689
    0000092E 31FC                   ADD         R15,R1
    00000930 D337                   MOV.L       L1392+20,R3; __slow_mvn
    00000932 430B                   JSR         @R3
    00000934 E00F                   MOV         #15,R0
          WMCP.c   205        const unsigned char submenu4[] = {
          WMCP.c   206            1, 0, 1,
          WMCP.c   207            1, 0, 1,
          WMCP.c   208            1, 1, 1,
          WMCP.c   209            0, 0, 1,
          WMCP.c   210            0, 0, 1
          WMCP.c   211        };
    00000936 9165                   MOV.W       L1392+8,R1 ; H'0788
    00000938 D238                   MOV.L       L1392+32,R2; L691
    0000093A 31FC                   ADD         R15,R1
    0000093C D334                   MOV.L       L1392+20,R3; __slow_mvn
    0000093E 430B                   JSR         @R3
    00000940 E00F                   MOV         #15,R0
          WMCP.c   212    
          WMCP.c   213        const char* characters[4][120] = {
          WMCP.c   214            {
          WMCP.c   215                "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
                         + "T",
          WMCP.c   216                "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
                         + "n",
          WMCP.c   217                "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6",
                         + "7",
          WMCP.c   218                "8", "9", " ", ",", ".", ";", ":", "!", "?", "\"", "\'", "#", "&", "$", "*", "/", "\xD8", "\xD
                         +8", "\xD8", "\xD8",
          WMCP.c   219                "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8"
                         +, "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8",
          WMCP.c   220                "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8"
                         +, "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8", "\xD8",
          WMCP.c   221            }
          WMCP.c   222        };
    00000942 61F3                   MOV         R15,R1
    00000944 D236                   MOV.L       L1392+36,R2; L693
    00000946 905E                   MOV.W       L1392+10,R0; H'0780
    00000948 D336                   MOV.L       L1392+40,R3; __quick_mvn
    0000094A 430B                   JSR         @R3
    0000094C 7108                   ADD         #8,R1
          WMCP.c   223    
          WMCP.c   224        int indexX = 0;
    0000094E EE00                   MOV         #0,R14
    00000950 D835                   MOV.L       L1392+44,R8; _actionButtonBg
    00000952 6AE3                   MOV         R14,R10
          WMCP.c   225        int indexY = 0;
    00000954 69E3                   MOV         R14,R9
          WMCP.c   226        int page = 0;
    00000956 6DE3                   MOV         R14,R13
          WMCP.c   227    
          WMCP.c   228        int x, y;
          WMCP.c   229    
          WMCP.c   230        while (1) {
    00000958              L1193:                            
          WMCP.c   231            Bdisp_AllClr_VRAM();
    00000958 D334                   MOV.L       L1392+48,R3; _Bdisp_AllClr_VRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000095A 430B                   JSR         @R3
    0000095C 0009                   NOP
          WMCP.c   232    
          WMCP.c   233            PrintXY(6, 0, "Character selection", 0);
    0000095E E700                   MOV         #0,R7
    00000960 D633                   MOV.L       L1392+52,R6; L710
    00000962 6573                   MOV         R7,R5
    00000964 D233                   MOV.L       L1392+56,R2; _PrintXY
    00000966 420B                   JSR         @R2
    00000968 E406                   MOV         #6,R4
          WMCP.c   234    
          WMCP.c   235            for (x = 0; x < 20; x++) { for (y = 0; y < 6; y++) { PrintXY(3+x*6, 8+y*8, characters[page][x+y*20
                         +], (indexX == x && indexY == y) ? 1 : 0); } }
    0000096A 6BE3                   MOV         R14,R11
    0000096C 934C                   MOV.W       L1392+12,R3; H'01E0
    0000096E 62F3                   MOV         R15,R2
    00000970 0D37                   MUL.L       R3,R13
    00000972 7208                   ADD         #8,R2
    00000974 031A                   STS         MACL,R3
    00000976 332C                   ADD         R2,R3
    00000978 2F32                   MOV.L       R3,@R15
    0000097A              L1194:                            
    0000097A 6CE3                   MOV         R14,R12
    0000097C 63B3                   MOV         R11,R3
    0000097E 62B3                   MOV         R11,R2
    00000980 4300                   SHLL        R3
    00000982 4208                   SHLL2       R2
    00000984 332C                   ADD         R2,R3
    00000986 7303                   ADD         #3,R3
    00000988 1F31                   MOV.L       R3,@(4,R15)
    0000098A              L1195:                            
    0000098A 3AB0                   CMP/EQ      R11,R10
    0000098C 8B03                   BF          L1196
    0000098E 39C0                   CMP/EQ      R12,R9
    00000990 8B01                   BF          L1196
    00000992 A001                   BRA         L1197
    00000994 E701                   MOV         #1,R7
    00000996              L1196:                            
    00000996 E700                   MOV         #0,R7
    00000998              L1197:                            
    00000998 60F2                   MOV.L       @R15,R0
    0000099A 65C3                   MOV         R12,R5
    0000099C 66C3                   MOV         R12,R6
    0000099E 63C3                   MOV         R12,R3
    000009A0 4608                   SHLL2       R6
    000009A2 363C                   ADD         R3,R6
    000009A4 D323                   MOV.L       L1392+56,R3; _PrintXY
    000009A6 4608                   SHLL2       R6
    000009A8 36BC                   ADD         R11,R6
    000009AA 4608                   SHLL2       R6
    000009AC 066E                   MOV.L       @(R0,R6),R6
    000009AE 4508                   SHLL2       R5
    000009B0 4500                   SHLL        R5
    000009B2 7508                   ADD         #8,R5
    000009B4 430B                   JSR         @R3
    000009B6 54F1                   MOV.L       @(4,R15),R4
    000009B8 7C01                   ADD         #1,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009BA E206                   MOV         #6,R2
    000009BC 3C23                   CMP/GE      R2,R12
    000009BE 8BE4                   BF          L1195
    000009C0 7B01                   ADD         #1,R11
    000009C2 E214                   MOV         #20,R2
    000009C4 3B23                   CMP/GE      R2,R11
    000009C6 8BD8                   BF          L1194
          WMCP.c   236    
          WMCP.c   237            drawPatern(2, 57, 19, 7, filledActionButtonBg, 0);
    000009C8 2FE6                   MOV.L       R14,@-R15
    000009CA E707                   MOV         #7,R7
    000009CC D21A                   MOV.L       L1392+60,R2; _filledActionButtonBg
    000009CE E613                   MOV         #19,R6
    000009D0 2F26                   MOV.L       R2,@-R15
    000009D2 E539                   MOV         #57,R5
    000009D4 BC92                   BSR         _drawPatern
    000009D6 E402                   MOV         #2,R4
          WMCP.c   238            drawPatern(9, 58, 5, 5, cancelIcon, 1);
    000009D8 D318                   MOV.L       L1392+64,R3; _cancelIcon
    000009DA E705                   MOV         #5,R7
    000009DC E201                   MOV         #1,R2
    000009DE 6673                   MOV         R7,R6
    000009E0 2F26                   MOV.L       R2,@-R15
    000009E2 E53A                   MOV         #58,R5
    000009E4 2F36                   MOV.L       R3,@-R15
    000009E6 BC89                   BSR         _drawPatern
    000009E8 E409                   MOV         #9,R4
    000009EA 7F10                   ADD         #16,R15
          WMCP.c   239            drawPatern(44, (page == 0) ? 62 : 57, 19, 7, actionButtonBg, 0);
    000009EC 2FE6                   MOV.L       R14,@-R15
    000009EE E707                   MOV         #7,R7
    000009F0 2F86                   MOV.L       R8,@-R15
    000009F2 2DD8                   TST         R13,R13
    000009F4 8F24                   BF/S        L1198
    000009F6 E613                   MOV         #19,R6
    000009F8 A023                   BRA         L1199
    000009FA E53E                   MOV         #62,R5
    000009FC              L1392:                            
    000009FC F838                   .DATA.W     H'F838
    000009FE 07B8                   .DATA.W     H'07B8
    00000A00 07A8                   .DATA.W     H'07A8
    00000A02 0798                   .DATA.W     H'0798
    00000A04 0788                   .DATA.W     H'0788
    00000A06 0780                   .DATA.W     H'0780
    00000A08 01E0                   .DATA.W     H'01E0
    00000A0A 0000                   .DATA.W     0
    00000A0C <00000000>             .DATA.L     L685
    00000A10 <00000000>             .DATA.L     __slow_mvn
    00000A14 <00000000>             .DATA.L     L687
    00000A18 <00000000>             .DATA.L     L689
    00000A1C <00000000>             .DATA.L     L691
    00000A20 <00000000>             .DATA.L     L693
    00000A24 <00000000>             .DATA.L     __quick_mvn
    00000A28 <00000000>             .DATA.L     _actionButtonBg
    00000A2C <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000A30 <00000000>             .DATA.L     L710
    00000A34 <00000000>             .DATA.L     _PrintXY




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A38 <00000000>             .DATA.L     _filledActionButtonBg
    00000A3C <00000000>             .DATA.L     _cancelIcon
    00000A40              L1198:                            
    00000A40 E539                   MOV         #57,R5
    00000A42              L1199:                            
    00000A42 BC5B                   BSR         _drawPatern
    00000A44 E42C                   MOV         #44,R4
          WMCP.c   240            if (page != 0) { drawPatern(52, 59, 3, 5, submenu1, 0); }
    00000A46 2DD8                   TST         R13,R13
    00000A48 8D0A                   BT/S        L1200
    00000A4A 7F08                   ADD         #8,R15
    00000A4C 2FE6                   MOV.L       R14,@-R15
    00000A4E E705                   MOV         #5,R7
    00000A50 9377                   MOV.W       L1393,R3   ; H'07BC
    00000A52 E603                   MOV         #3,R6
    00000A54 33FC                   ADD         R15,R3
    00000A56 E53B                   MOV         #59,R5
    00000A58 2F36                   MOV.L       R3,@-R15
    00000A5A BC4F                   BSR         _drawPatern
    00000A5C E434                   MOV         #52,R4
    00000A5E 7F08                   ADD         #8,R15
    00000A60              L1200:                            
          WMCP.c   241            drawPatern(65, (page == 1) ? 62 : 57, 19, 7, actionButtonBg, 0);
    00000A60 2FE6                   MOV.L       R14,@-R15
    00000A62 E707                   MOV         #7,R7
    00000A64 2F86                   MOV.L       R8,@-R15
    00000A66 60D3                   MOV         R13,R0
    00000A68 8801                   CMP/EQ      #1,R0
    00000A6A 8F02                   BF/S        L1201
    00000A6C E613                   MOV         #19,R6
    00000A6E A001                   BRA         L1202
    00000A70 E53E                   MOV         #62,R5
    00000A72              L1201:                            
    00000A72 E539                   MOV         #57,R5
    00000A74              L1202:                            
    00000A74 BC42                   BSR         _drawPatern
    00000A76 E441                   MOV         #65,R4
          WMCP.c   242            if (page != 1) { drawPatern(73, 59, 3, 5, submenu2, 0); }
    00000A78 60D3                   MOV         R13,R0
    00000A7A 8801                   CMP/EQ      #1,R0
    00000A7C 8D0A                   BT/S        L1203
    00000A7E 7F08                   ADD         #8,R15
    00000A80 2FE6                   MOV.L       R14,@-R15
    00000A82 E705                   MOV         #5,R7
    00000A84 925E                   MOV.W       L1393+2,R2 ; H'07AC
    00000A86 E603                   MOV         #3,R6
    00000A88 32FC                   ADD         R15,R2
    00000A8A E53B                   MOV         #59,R5
    00000A8C 2F26                   MOV.L       R2,@-R15
    00000A8E BC35                   BSR         _drawPatern
    00000A90 E449                   MOV         #73,R4
    00000A92 7F08                   ADD         #8,R15
    00000A94              L1203:                            
          WMCP.c   243            drawPatern(86, (page == 2) ? 62 : 57, 19, 7, actionButtonBg, 0);
    00000A94 2FE6                   MOV.L       R14,@-R15
    00000A96 E707                   MOV         #7,R7
    00000A98 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A9A 60D3                   MOV         R13,R0
    00000A9C 8802                   CMP/EQ      #2,R0
    00000A9E 8F02                   BF/S        L1204
    00000AA0 E613                   MOV         #19,R6
    00000AA2 A001                   BRA         L1205
    00000AA4 E53E                   MOV         #62,R5
    00000AA6              L1204:                            
    00000AA6 E539                   MOV         #57,R5
    00000AA8              L1205:                            
    00000AA8 BC28                   BSR         _drawPatern
    00000AAA E456                   MOV         #86,R4
          WMCP.c   244            if (page != 2) { drawPatern(94, 59, 3, 5, submenu3, 0); }
    00000AAC 60D3                   MOV         R13,R0
    00000AAE 8802                   CMP/EQ      #2,R0
    00000AB0 8D0A                   BT/S        L1206
    00000AB2 7F08                   ADD         #8,R15
    00000AB4 2FE6                   MOV.L       R14,@-R15
    00000AB6 E705                   MOV         #5,R7
    00000AB8 9245                   MOV.W       L1393+4,R2 ; H'079C
    00000ABA E603                   MOV         #3,R6
    00000ABC 32FC                   ADD         R15,R2
    00000ABE E53B                   MOV         #59,R5
    00000AC0 2F26                   MOV.L       R2,@-R15
    00000AC2 BC1B                   BSR         _drawPatern
    00000AC4 E45E                   MOV         #94,R4
    00000AC6 7F08                   ADD         #8,R15
    00000AC8              L1206:                            
          WMCP.c   245            drawPatern(107, (page == 3) ? 62 : 57, 19, 7, actionButtonBg, 0);
    00000AC8 2FE6                   MOV.L       R14,@-R15
    00000ACA E707                   MOV         #7,R7
    00000ACC 2F86                   MOV.L       R8,@-R15
    00000ACE 60D3                   MOV         R13,R0
    00000AD0 8803                   CMP/EQ      #3,R0
    00000AD2 8F02                   BF/S        L1207
    00000AD4 E613                   MOV         #19,R6
    00000AD6 A001                   BRA         L1208
    00000AD8 E53E                   MOV         #62,R5
    00000ADA              L1207:                            
    00000ADA E539                   MOV         #57,R5
    00000ADC              L1208:                            
    00000ADC BC0E                   BSR         _drawPatern
    00000ADE E46B                   MOV         #107,R4
          WMCP.c   246            if (page != 3) { drawPatern(115, 59, 3, 5, submenu4, 0); }
    00000AE0 60D3                   MOV         R13,R0
    00000AE2 8803                   CMP/EQ      #3,R0
    00000AE4 8D0A                   BT/S        L1209
    00000AE6 7F08                   ADD         #8,R15
    00000AE8 2FE6                   MOV.L       R14,@-R15
    00000AEA E705                   MOV         #5,R7
    00000AEC 922C                   MOV.W       L1393+6,R2 ; H'078C
    00000AEE E603                   MOV         #3,R6
    00000AF0 32FC                   ADD         R15,R2
    00000AF2 E53B                   MOV         #59,R5
    00000AF4 2F26                   MOV.L       R2,@-R15
    00000AF6 BC01                   BSR         _drawPatern
    00000AF8 E473                   MOV         #115,R4
    00000AFA 7F08                   ADD         #8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AFC              L1209:                            
          WMCP.c   247    
          WMCP.c   248            Bdisp_PutDisp_DD();
    00000AFC D213                   MOV.L       L1393+10,R2; _Bdisp_PutDisp_DD
    00000AFE 420B                   JSR         @R2
    00000B00 0009                   NOP
          WMCP.c   249    
          WMCP.c   250            GetKey(&key);
    00000B02 D413                   MOV.L       L1393+14,R4; _key
    00000B04 BB62                   BSR         _GetKeyMod
    00000B06 0009                   NOP
    00000B08 D211                   MOV.L       L1393+14,R2; _key
    00000B0A 6022                   MOV.L       @R2,R0
    00000B0C 882F                   CMP/EQ      #47,R0
    00000B0E 8D03                   BT/S        L1211
    00000B10 6403                   MOV         R0,R4
    00000B12 6022                   MOV.L       @R2,R0
    00000B14 884F                   CMP/EQ      #79,R0
    00000B16 8B02                   BF          L1210
    00000B18              L1211:                            
          WMCP.c   251            if (key == KEY_CTRL_EXIT || key == KEY_CTRL_F1) { return ""; }
    00000B18 D00E                   MOV.L       L1393+18,R0; L681
    00000B1A A055                   BRA         L1212
    00000B1C 0009                   NOP
    00000B1E              L1210:                            
          WMCP.c   252            else if (key == KEY_CTRL_EXE) { return characters[page][indexX+indexY*20]; }
    00000B1E 6043                   MOV         R4,R0
    00000B20 881F                   CMP/EQ      #31,R0
    00000B22 8B19                   BF          L1214
    00000B24 9211                   MOV.W       L1393+8,R2 ; H'01E0
    00000B26 6093                   MOV         R9,R0
    00000B28 0D27                   MUL.L       R2,R13
    00000B2A 6393                   MOV         R9,R3
    00000B2C 4008                   SHLL2       R0
    00000B2E 303C                   ADD         R3,R0
    00000B30 4008                   SHLL2       R0
    00000B32 30AC                   ADD         R10,R0
    00000B34 4008                   SHLL2       R0
    00000B36 0D1A                   STS         MACL,R13
    00000B38 63F3                   MOV         R15,R3
    00000B3A 7308                   ADD         #8,R3
    00000B3C 3D3C                   ADD         R3,R13
    00000B3E A043                   BRA         L1212
    00000B40 00DE                   MOV.L       @(R0,R13),R0
    00000B42              L1393:                            
    00000B42 07BC                   .DATA.W     H'07BC
    00000B44 07AC                   .DATA.W     H'07AC
    00000B46 079C                   .DATA.W     H'079C
    00000B48 078C                   .DATA.W     H'078C
    00000B4A 01E0                   .DATA.W     H'01E0
    00000B4C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000B50 <00000000>             .DATA.L     _key
    00000B54 <00000000>             .DATA.L     L681
    00000B58              L1214:                            
          WMCP.c   253            else if (key == KEY_CTRL_F3) { page = 0; }
    00000B58 883B                   CMP/EQ      #59,R0
    00000B5A 8B01                   BF          L1216




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B5C AEFC                   BRA         L1193
    00000B5E 6DE3                   MOV         R14,R13
    00000B60              L1216:                            
          WMCP.c   254            else if (key == KEY_CTRL_F4) { page = 1; }
    00000B60 6043                   MOV         R4,R0
    00000B62 8831                   CMP/EQ      #49,R0
    00000B64 8B01                   BF          L1218
    00000B66 AEF7                   BRA         L1193
    00000B68 ED01                   MOV         #1,R13
    00000B6A              L1218:                            
          WMCP.c   255            else if (key == KEY_CTRL_F5) { page = 2; }
    00000B6A 8827                   CMP/EQ      #39,R0
    00000B6C 8B01                   BF          L1220
    00000B6E AEF3                   BRA         L1193
    00000B70 ED02                   MOV         #2,R13
    00000B72              L1220:                            
          WMCP.c   256            else if (key == KEY_CTRL_F6) { page = 3; }
    00000B72 6043                   MOV         R4,R0
    00000B74 881D                   CMP/EQ      #29,R0
    00000B76 8B01                   BF          L1222
    00000B78 AEEE                   BRA         L1193
    00000B7A ED03                   MOV         #3,R13
    00000B7C              L1222:                            
          WMCP.c   257            else if (key == KEY_CTRL_LEFT) { if (indexX > 0) { indexX--; } else { indexX = 19; } }
    00000B7C 8826                   CMP/EQ      #38,R0
    00000B7E 8B05                   BF          L1224
    00000B80 4A15                   CMP/PL      R10
    00000B82 8B01                   BF          L1225
    00000B84 AEE8                   BRA         L1193
    00000B86 7AFF                   ADD         #-1,R10
    00000B88              L1225:                            
    00000B88 AEE6                   BRA         L1193
    00000B8A EA13                   MOV         #19,R10
    00000B8C              L1224:                            
          WMCP.c   258            else if (key == KEY_CTRL_RIGHT) { if (indexX < 19) { indexX++; } else { indexX = 0; } }
    00000B8C 6043                   MOV         R4,R0
    00000B8E 881B                   CMP/EQ      #27,R0
    00000B90 8B06                   BF          L1228
    00000B92 E213                   MOV         #19,R2
    00000B94 3A23                   CMP/GE      R2,R10
    00000B96 8901                   BT          L1229
    00000B98 AEDE                   BRA         L1193
    00000B9A 7A01                   ADD         #1,R10
    00000B9C              L1229:                            
    00000B9C AEDC                   BRA         L1193
    00000B9E 6AE3                   MOV         R14,R10
    00000BA0              L1228:                            
          WMCP.c   259            else if (key == KEY_CTRL_UP) { if (indexY > 0) { indexY--; } else { indexY = 5; } }
    00000BA0 881C                   CMP/EQ      #28,R0
    00000BA2 8B05                   BF          L1232
    00000BA4 4915                   CMP/PL      R9
    00000BA6 8B01                   BF          L1233
    00000BA8 AED6                   BRA         L1193
    00000BAA 79FF                   ADD         #-1,R9
    00000BAC              L1233:                            
    00000BAC AED4                   BRA         L1193
    00000BAE E905                   MOV         #5,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BB0              L1232:                            
          WMCP.c   260            else if (key == KEY_CTRL_DOWN) { if (indexY < 5) { indexY++; } else { indexY = 0; } }
    00000BB0 6043                   MOV         R4,R0
    00000BB2 8825                   CMP/EQ      #37,R0
    00000BB4 8901                   BT          L1394
    00000BB6 AECF                   BRA         L1193
    00000BB8 0009                   NOP
    00000BBA              L1394:                            
    00000BBA E305                   MOV         #5,R3
    00000BBC 3933                   CMP/GE      R3,R9
    00000BBE 8901                   BT          L1237
    00000BC0 AECA                   BRA         L1193
    00000BC2 7901                   ADD         #1,R9
    00000BC4              L1237:                            
    00000BC4 AEC8                   BRA         L1193
    00000BC6 69E3                   MOV         R14,R9
    00000BC8              L1212:                            
          WMCP.c   261        }
          WMCP.c   262    }
    00000BC8 910A                   MOV.W       L1395,R1   ; H'07C8
    00000BCA 3F1C                   ADD         R1,R15
    00000BCC 4F16                   LDS.L       @R15+,MACL
    00000BCE 4F26                   LDS.L       @R15+,PR
    00000BD0 68F6                   MOV.L       @R15+,R8
    00000BD2 69F6                   MOV.L       @R15+,R9
    00000BD4 6AF6                   MOV.L       @R15+,R10
    00000BD6 6BF6                   MOV.L       @R15+,R11
    00000BD8 6CF6                   MOV.L       @R15+,R12
    00000BDA 6DF6                   MOV.L       @R15+,R13
    00000BDC 000B                   RTS
    00000BDE 6EF6                   MOV.L       @R15+,R14
    00000BE0              L1395:                            
    00000BE0 07C8                   .DATA.W     H'07C8
          WMCP.c   263    
          WMCP.c   264    int editStringMenu(const char* menuName, char* string, const unsigned int maxChar) {
    00000BE2              _editStringMenu:                 ; function: editStringMenu
                                                           ; frame size=264
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    00000BE2 2FE6                   MOV.L       R14,@-R15
    00000BE4 2FD6                   MOV.L       R13,@-R15
    00000BE6 EE00                   MOV         #0,R14
          WMCP.c   265        const unsigned char defaultCursorIcon[] = {
          WMCP.c   266            1, 1,
          WMCP.c   267            1, 1,
          WMCP.c   268            1, 1,
          WMCP.c   269            1, 1,
          WMCP.c   270            1, 1,
          WMCP.c   271            1, 1,
          WMCP.c   272            1, 1
          WMCP.c   273        };
    00000BE8 9154                   MOV.W       L1396+2,R1 ; H'0098
    00000BEA 2FC6                   MOV.L       R12,@-R15
    00000BEC 2FB6                   MOV.L       R11,@-R15
    00000BEE EB01                   MOV         #1,R11
    00000BF0 D22A                   MOV.L       L1396+10,R2; L741
    00000BF2 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BF4 2F96                   MOV.L       R9,@-R15
    00000BF6 2F86                   MOV.L       R8,@-R15
    00000BF8 4F22                   STS.L       PR,@-R15
    00000BFA 904A                   MOV.W       L1396,R0   ; H'FF58
    00000BFC D328                   MOV.L       L1396+14,R3; __slow_mvn
    00000BFE 3F0C                   ADD         R0,R15
    00000C00 1F49                   MOV.L       R4,@(36,R15)
    00000C02 31FC                   ADD         R15,R1
    00000C04 1F52                   MOV.L       R5,@(8,R15)
    00000C06 1F61                   MOV.L       R6,@(4,R15)
    00000C08 430B                   JSR         @R3
    00000C0A E00E                   MOV         #14,R0
          WMCP.c   274        const unsigned char shiftCursorIcon[] = {
          WMCP.c   275            0, 0, 1, 1, 0,
          WMCP.c   276            0, 1, 0, 0, 0,
          WMCP.c   277            0, 0, 1, 0, 0,
          WMCP.c   278            0, 0, 0, 1, 0,
          WMCP.c   279            0, 1, 1, 0, 0,
          WMCP.c   280            1, 0, 0, 0, 1,
          WMCP.c   281            1, 1, 0, 1, 1
          WMCP.c   282        };
    00000C0C D225                   MOV.L       L1396+18,R2; L743
    00000C0E 61F3                   MOV         R15,R1
    00000C10 D323                   MOV.L       L1396+14,R3; __slow_mvn
    00000C12 7174                   ADD         #116,R1
    00000C14 430B                   JSR         @R3
    00000C16 E023                   MOV         #35,R0
          WMCP.c   283        const unsigned char uppercaseAlphaCursorIcon[] = {
          WMCP.c   284            0, 0, 1, 0, 0,
          WMCP.c   285            0, 1, 0, 1, 0,
          WMCP.c   286            0, 1, 1, 1, 0,
          WMCP.c   287            0, 1, 0, 1, 0,
          WMCP.c   288            0, 1, 0, 1, 0,
          WMCP.c   289            1, 0, 0, 0, 1,
          WMCP.c   290            1, 1, 0, 1, 1
          WMCP.c   291        };
    00000C18 D223                   MOV.L       L1396+22,R2; L745
    00000C1A 61F3                   MOV         R15,R1
    00000C1C D320                   MOV.L       L1396+14,R3; __slow_mvn
    00000C1E 7150                   ADD         #80,R1
    00000C20 430B                   JSR         @R3
    00000C22 E023                   MOV         #35,R0
          WMCP.c   292        const unsigned char lowercaseAlphaCursorIcon[] = {
          WMCP.c   293            0, 0, 1, 0, 0,
          WMCP.c   294            0, 0, 0, 1, 0,
          WMCP.c   295            0, 0, 1, 1, 0,
          WMCP.c   296            0, 1, 0, 1, 0,
          WMCP.c   297            0, 0, 1, 1, 0,
          WMCP.c   298            1, 0, 0, 0, 1,
          WMCP.c   299            1, 1, 0, 1, 1
          WMCP.c   300        };
    00000C24 D221                   MOV.L       L1396+26,R2; L747
    00000C26 61F3                   MOV         R15,R1
    00000C28 D31D                   MOV.L       L1396+14,R3; __slow_mvn
    00000C2A 712C                   ADD         #44,R1
    00000C2C 430B                   JSR         @R3
    00000C2E E023                   MOV         #35,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   301    
          WMCP.c   302        int keyState = 0;           // 0: default; 1: temp shift; 2: temp alpha; 3: perm alpha
          WMCP.c   303        int uppercase = 1;
    00000C30 1FB5                   MOV.L       R11,@(20,R15)
    00000C32 6CE3                   MOV         R14,R12
          WMCP.c   304    
          WMCP.c   305        int i, j;
          WMCP.c   306    
          WMCP.c   307        unsigned int cursor = 0;
          WMCP.c   308        unsigned int contentCursor = 0;
          WMCP.c   309        int xStart, width;
          WMCP.c   310    
          WMCP.c   311        char maxCharItoaBuffer[3];
          WMCP.c   312    
          WMCP.c   313        char* keyBuffer;
          WMCP.c   314        char** stringEditBuffer;
          WMCP.c   315        short* stringContent;
          WMCP.c   316        int newCharLength;
          WMCP.c   317    
          WMCP.c   318        stringEditBuffer = malloc(2 * maxChar);
    00000C34 D31E                   MOV.L       L1396+30,R3; _malloc
    00000C36 69C3                   MOV         R12,R9
    00000C38 54F1                   MOV.L       @(4,R15),R4
    00000C3A 6DC3                   MOV         R12,R13
    00000C3C 4400                   SHLL        R4
    00000C3E 430B                   JSR         @R3
    00000C40 2F42                   MOV.L       R4,@R15
          WMCP.c   319        stringContent = malloc(maxChar * sizeof(short));
    00000C42 D31B                   MOV.L       L1396+30,R3; _malloc
    00000C44 430B                   JSR         @R3
    00000C46 64F2                   MOV.L       @R15,R4
          WMCP.c   320        for (i = 0, j = 0; i < maxChar; i++, j++) {
    00000C48 2FE2                   MOV.L       R14,@R15
    00000C4A 6A03                   MOV         R0,R10
    00000C4C 53F1                   MOV.L       @(4,R15),R3
    00000C4E 68D3                   MOV         R13,R8
    00000C50 6283                   MOV         R8,R2
    00000C52 3232                   CMP/HS      R3,R2
    00000C54 893A                   BT          L1239
    00000C56              L1240:                            
          WMCP.c   321            if (string[j] == 0x7F || string[j] == 0xE5 || string[j] == 0xE6) { stringContent[i] = 2; j++; }
    00000C56 53F2                   MOV.L       @(8,R15),R3
    00000C58 60F2                   MOV.L       @R15,R0
    00000C5A 003C                   MOV.B       @(R0,R3),R0
    00000C5C 887F                   CMP/EQ      #127,R0
    00000C5E 8D06                   BT/S        L1242
    00000C60 6403                   MOV         R0,R4
    00000C62 9118                   MOV.W       L1396+4,R1 ; H'00E5
    00000C64 3410                   CMP/EQ      R1,R4
    00000C66 8902                   BT          L1242
    00000C68 9016                   MOV.W       L1396+6,R0 ; H'00E6
    00000C6A 3400                   CMP/EQ      R0,R4
    00000C6C 8B07                   BF          L1241
    00000C6E              L1242:                            
    00000C6E 6083                   MOV         R8,R0
    00000C70 4000                   SHLL        R0
    00000C72 E302                   MOV         #2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C74 0A35                   MOV.W       R3,@(R0,R10)
    00000C76 62F2                   MOV.L       @R15,R2
    00000C78 7201                   ADD         #1,R2
    00000C7A A020                   BRA         L1243
    00000C7C 2F22                   MOV.L       R2,@R15
    00000C7E              L1241:                            
          WMCP.c   322            else if (j < strlen(string)) { stringContent[i] = 1; }
    00000C7E D30D                   MOV.L       L1396+34,R3; _strlen
    00000C80 430B                   JSR         @R3
    00000C82 54F2                   MOV.L       @(8,R15),R4
    00000C84 62F2                   MOV.L       @R15,R2
    00000C86 3202                   CMP/HS      R0,R2
    00000C88 8916                   BT          L1244
    00000C8A 6083                   MOV         R8,R0
    00000C8C 4000                   SHLL        R0
    00000C8E A016                   BRA         L1243
    00000C90 0AB5                   MOV.W       R11,@(R0,R10)
    00000C92              L1396:                            
    00000C92 FF58                   .DATA.W     H'FF58
    00000C94 0098                   .DATA.W     H'0098
    00000C96 00E5                   .DATA.W     H'00E5
    00000C98 00E6                   .DATA.W     H'00E6
    00000C9A 0000                   .DATA.W     0
    00000C9C <00000000>             .DATA.L     L741
    00000CA0 <00000000>             .DATA.L     __slow_mvn
    00000CA4 <00000000>             .DATA.L     L743
    00000CA8 <00000000>             .DATA.L     L745
    00000CAC <00000000>             .DATA.L     L747
    00000CB0 <00000000>             .DATA.L     _malloc
    00000CB4 <00000000>             .DATA.L     _strlen
    00000CB8              L1244:                            
          WMCP.c   323            else { stringContent[i] = 0; }
    00000CB8 6083                   MOV         R8,R0
    00000CBA 4000                   SHLL        R0
    00000CBC 0AE5                   MOV.W       R14,@(R0,R10)
    00000CBE              L1243:                            
    00000CBE 7801                   ADD         #1,R8
    00000CC0 63F2                   MOV.L       @R15,R3
    00000CC2 7301                   ADD         #1,R3
    00000CC4 2F32                   MOV.L       R3,@R15
    00000CC6 52F1                   MOV.L       @(4,R15),R2
    00000CC8 3822                   CMP/HS      R2,R8
    00000CCA 8BC4                   BF          L1240
    00000CCC              L1239:                            
    00000CCC 53F1                   MOV.L       @(4,R15),R3
    00000CCE 73FF                   ADD         #-1,R3
    00000CD0 1F34                   MOV.L       R3,@(16,R15)
    00000CD2 52F1                   MOV.L       @(4,R15),R2
    00000CD4 6123                   MOV         R2,R1
    00000CD6 4200                   SHLL        R2
    00000CD8 4108                   SHLL2       R1
    00000CDA 321C                   ADD         R1,R2
    00000CDC 7205                   ADD         #5,R2
    00000CDE 2F22                   MOV.L       R2,@R15
    00000CE0 51F4                   MOV.L       @(16,R15),R1
    00000CE2 4100                   SHLL        R1
    00000CE4 31AC                   ADD         R10,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CE6 1F18                   MOV.L       R1,@(32,R15)
          WMCP.c   324        }
          WMCP.c   325    
          WMCP.c   326        while (1) {
    00000CE8              L1247:                            
          WMCP.c   327            Bdisp_AllClr_VRAM();
    00000CE8 D831                   MOV.L       L1397+2,R8 ; _Bdisp_AllClr_VRAM
    00000CEA 480B                   JSR         @R8
    00000CEC 0009                   NOP
          WMCP.c   328    
          WMCP.c   329            drawTitleBar(menuName);
    00000CEE BAD7                   BSR         _drawTitleBar
    00000CF0 54F9                   MOV.L       @(36,R15),R4
          WMCP.c   330            
          WMCP.c   331            width = maxChar * 6 + 5;
          WMCP.c   332            xStart = 63 - (int)(width / 2);
    00000CF2 E83F                   MOV         #63,R8
    00000CF4 62F2                   MOV.L       @R15,R2
    00000CF6 E300                   MOV         #0,R3
          WMCP.c   333            Bdisp_DrawLineVRAM(xStart + 1, 23, xStart + width - 1, 23);
    00000CF8 66F2                   MOV.L       @R15,R6
    00000CFA E717                   MOV         #23,R7
    00000CFC 3327                   CMP/GT      R2,R3
    00000CFE 323E                   ADDC        R3,R2
    00000D00 D32C                   MOV.L       L1397+6,R3 ; _Bdisp_DrawLineVRAM
    00000D02 4221                   SHAR        R2
    00000D04 3828                   SUB         R2,R8
    00000D06 368C                   ADD         R8,R6
    00000D08 1F63                   MOV.L       R6,@(12,R15)
    00000D0A 6573                   MOV         R7,R5
    00000D0C 76FF                   ADD         #-1,R6
    00000D0E 6483                   MOV         R8,R4
    00000D10 1F66                   MOV.L       R6,@(24,R15)
    00000D12 7401                   ADD         #1,R4
    00000D14 430B                   JSR         @R3
    00000D16 1F47                   MOV.L       R4,@(28,R15)
          WMCP.c   334            Bdisp_DrawLineVRAM(xStart + 1, 35, xStart + width - 1, 35);
    00000D18 56F6                   MOV.L       @(24,R15),R6
    00000D1A E723                   MOV         #35,R7
    00000D1C D325                   MOV.L       L1397+6,R3 ; _Bdisp_DrawLineVRAM
    00000D1E 6573                   MOV         R7,R5
    00000D20 430B                   JSR         @R3
    00000D22 54F7                   MOV.L       @(28,R15),R4
          WMCP.c   335            Bdisp_DrawLineVRAM(xStart, 24, xStart, 34);
    00000D24 D223                   MOV.L       L1397+6,R2 ; _Bdisp_DrawLineVRAM
    00000D26 E722                   MOV         #34,R7
    00000D28 6683                   MOV         R8,R6
    00000D2A E518                   MOV         #24,R5
    00000D2C 420B                   JSR         @R2
    00000D2E 6483                   MOV         R8,R4
          WMCP.c   336            Bdisp_DrawLineVRAM(xStart + width, 24, xStart + width, 34);
    00000D30 56F3                   MOV.L       @(12,R15),R6
    00000D32 E518                   MOV         #24,R5
    00000D34 D31F                   MOV.L       L1397+6,R3 ; _Bdisp_DrawLineVRAM
    00000D36 E722                   MOV         #34,R7
    00000D38 430B                   JSR         @R3
    00000D3A 6463                   MOV         R6,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   337    
          WMCP.c   338            PrintXY(xStart + 2, 26, string, 0);
    00000D3C 56F2                   MOV.L       @(8,R15),R6
    00000D3E E51A                   MOV         #26,R5
    00000D40 D31D                   MOV.L       L1397+10,R3; _PrintXY
    00000D42 E700                   MOV         #0,R7
    00000D44 6483                   MOV         R8,R4
    00000D46 7402                   ADD         #2,R4
    00000D48 430B                   JSR         @R3
    00000D4A 1F46                   MOV.L       R4,@(24,R15)
    00000D4C 6293                   MOV         R9,R2
    00000D4E 6393                   MOV         R9,R3
    00000D50 4200                   SHLL        R2
    00000D52 4308                   SHLL2       R3
    00000D54 323C                   ADD         R3,R2
    00000D56 2CC8                   TST         R12,R12
    00000D58 8F0A                   BF/S        L1248
    00000D5A 1F23                   MOV.L       R2,@(12,R15)
          WMCP.c   339            if (keyState == 0) { drawPatern(xStart + 2 + cursor * 6, 26, 2, 7, defaultCursorIcon, 0); }
    00000D5C 2FE6                   MOV.L       R14,@-R15
    00000D5E E707                   MOV         #7,R7
    00000D60 9125                   MOV.W       L1397,R1   ; H'009C
    00000D62 E602                   MOV         #2,R6
    00000D64 31FC                   ADD         R15,R1
    00000D66 2F16                   MOV.L       R1,@-R15
    00000D68 54F8                   MOV.L       @(32,R15),R4
    00000D6A 342C                   ADD         R2,R4
    00000D6C A00D                   BRA         L1379
    00000D6E E51A                   MOV         #26,R5
    00000D70              L1248:                            
          WMCP.c   340            else if (keyState == 1) { drawPatern(xStart + 3 + cursor * 6, 26, 5, 7, shiftCursorIcon, 0); }
    00000D70 60C3                   MOV         R12,R0
    00000D72 8801                   CMP/EQ      #1,R0
    00000D74 8B0D                   BF          L1250
    00000D76 E707                   MOV         #7,R7
    00000D78 2FE6                   MOV.L       R14,@-R15
    00000D7A E605                   MOV         #5,R6
    00000D7C 61F3                   MOV         R15,R1
    00000D7E 7178                   ADD         #120,R1
    00000D80 2F16                   MOV.L       R1,@-R15
    00000D82 E51A                   MOV         #26,R5
    00000D84 6483                   MOV         R8,R4
    00000D86 7403                   ADD         #3,R4
    00000D88 342C                   ADD         R2,R4
    00000D8A              L1379:                            
    00000D8A BAB7                   BSR         _drawPatern
    00000D8C 0009                   NOP
    00000D8E A022                   BRA         L1249
    00000D90 7F08                   ADD         #8,R15
    00000D92              L1250:                            
          WMCP.c   341            else if (uppercase) { drawPatern(xStart + 3 + cursor * 6, 26, 5, 7, uppercaseAlphaCursorIcon, 0); 
                         +}
    00000D92 53F5                   MOV.L       @(20,R15),R3
    00000D94 2338                   TST         R3,R3
    00000D96 8911                   BT          L1252
    00000D98 2FE6                   MOV.L       R14,@-R15
    00000D9A E707                   MOV         #7,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D9C 63F3                   MOV         R15,R3
    00000D9E 7354                   ADD         #84,R3
    00000DA0 2F36                   MOV.L       R3,@-R15
    00000DA2 E605                   MOV         #5,R6
    00000DA4 6483                   MOV         R8,R4
    00000DA6 7403                   ADD         #3,R4
    00000DA8 342C                   ADD         R2,R4
    00000DAA A011                   BRA         L1378
    00000DAC E51A                   MOV         #26,R5
    00000DAE              L1397:                            
    00000DAE 009C                   .DATA.W     H'009C
    00000DB0 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000DB4 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    00000DB8 <00000000>             .DATA.L     _PrintXY
    00000DBC              L1252:                            
          WMCP.c   342            else { drawPatern(xStart + 3 + cursor * 6, 26, 5, 7, lowercaseAlphaCursorIcon, 0); }
    00000DBC 2FE6                   MOV.L       R14,@-R15
    00000DBE E707                   MOV         #7,R7
    00000DC0 63F3                   MOV         R15,R3
    00000DC2 7330                   ADD         #48,R3
    00000DC4 2F36                   MOV.L       R3,@-R15
    00000DC6 E605                   MOV         #5,R6
    00000DC8 E51A                   MOV         #26,R5
    00000DCA 6483                   MOV         R8,R4
    00000DCC 7403                   ADD         #3,R4
    00000DCE 342C                   ADD         R2,R4
    00000DD0              L1378:                            
    00000DD0 BA94                   BSR         _drawPatern
    00000DD2 0009                   NOP
    00000DD4 7F08                   ADD         #8,R15
    00000DD6              L1249:                            
          WMCP.c   343    
          WMCP.c   344            itoa(maxChar, maxCharItoaBuffer);
    00000DD6 68F3                   MOV         R15,R8
    00000DD8 7828                   ADD         #40,R8
    00000DDA 6583                   MOV         R8,R5
    00000DDC BA14                   BSR         _itoa
    00000DDE 54F1                   MOV.L       @(4,R15),R4
          WMCP.c   345            PrintMini(41, 37, "max    char", 0);
    00000DE0 D66C                   MOV.L       L1398,R6   ; L770
    00000DE2 E525                   MOV         #37,R5
    00000DE4 D26C                   MOV.L       L1398+4,R2 ; _PrintMini
    00000DE6 E700                   MOV         #0,R7
    00000DE8 420B                   JSR         @R2
    00000DEA E429                   MOV         #41,R4
          WMCP.c   346            PrintMini(58, 37, (const unsigned char*)maxCharItoaBuffer, 0);
    00000DEC D36A                   MOV.L       L1398+4,R3 ; _PrintMini
    00000DEE E700                   MOV         #0,R7
    00000DF0 6683                   MOV         R8,R6
    00000DF2 E525                   MOV         #37,R5
    00000DF4 430B                   JSR         @R3
    00000DF6 E43A                   MOV         #58,R4
          WMCP.c   347    
          WMCP.c   348            drawPatern(2, 57, 19, 7, filledActionButtonBg, 0);
    00000DF8 D868                   MOV.L       L1398+8,R8 ; _filledActionButtonBg
    00000DFA E707                   MOV         #7,R7
    00000DFC 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DFE E613                   MOV         #19,R6
    00000E00 2F86                   MOV.L       R8,@-R15
    00000E02 E539                   MOV         #57,R5
    00000E04 BA7A                   BSR         _drawPatern
    00000E06 E402                   MOV         #2,R4
          WMCP.c   349            drawPatern(9, 58, 5, 5, cancelIcon, 1);
    00000E08 2FB6                   MOV.L       R11,@-R15
    00000E0A E705                   MOV         #5,R7
    00000E0C D364                   MOV.L       L1398+12,R3; _cancelIcon
    00000E0E E53A                   MOV         #58,R5
    00000E10 2F36                   MOV.L       R3,@-R15
    00000E12 6673                   MOV         R7,R6
    00000E14 BA72                   BSR         _drawPatern
    00000E16 E409                   MOV         #9,R4
          WMCP.c   350            drawPatern(44, 57, 19, 7, filledActionButtonBg, 0);
    00000E18 2FE6                   MOV.L       R14,@-R15
    00000E1A E707                   MOV         #7,R7
    00000E1C 2F86                   MOV.L       R8,@-R15
    00000E1E E613                   MOV         #19,R6
    00000E20 E539                   MOV         #57,R5
    00000E22 BA6B                   BSR         _drawPatern
    00000E24 E42C                   MOV         #44,R4
          WMCP.c   351            drawPatern(46, 58, 15, 5, characterSelectionIcon, 1);
    00000E26 E705                   MOV         #5,R7
    00000E28 2FB6                   MOV.L       R11,@-R15
    00000E2A E60F                   MOV         #15,R6
    00000E2C D25D                   MOV.L       L1398+16,R2; _characterSelectionIcon
    00000E2E E53A                   MOV         #58,R5
    00000E30 2F26                   MOV.L       R2,@-R15
    00000E32 BA63                   BSR         _drawPatern
    00000E34 E42E                   MOV         #46,R4
          WMCP.c   352            drawPatern(65, 57, 19, 7, actionButtonBg, 0);
    00000E36 E707                   MOV         #7,R7
    00000E38 2FE6                   MOV.L       R14,@-R15
    00000E3A E613                   MOV         #19,R6
    00000E3C D25A                   MOV.L       L1398+20,R2; _actionButtonBg
    00000E3E E539                   MOV         #57,R5
    00000E40 2F26                   MOV.L       R2,@-R15
    00000E42 BA5B                   BSR         _drawPatern
    00000E44 E441                   MOV         #65,R4
          WMCP.c   353            drawPatern(67, 59, 15, 5, uppercaseToLowercaseIcon, 0);
    00000E46 E705                   MOV         #5,R7
    00000E48 2FE6                   MOV.L       R14,@-R15
    00000E4A E60F                   MOV         #15,R6
    00000E4C D257                   MOV.L       L1398+24,R2; _uppercaseToLowercaseIcon
    00000E4E E53B                   MOV         #59,R5
    00000E50 2F26                   MOV.L       R2,@-R15
    00000E52 BA53                   BSR         _drawPatern
    00000E54 E443                   MOV         #67,R4
          WMCP.c   354            drawPatern(107, 57, 19, 7, filledActionButtonBg, 0);
    00000E56 E707                   MOV         #7,R7
    00000E58 2FE6                   MOV.L       R14,@-R15
    00000E5A E613                   MOV         #19,R6
    00000E5C 2F86                   MOV.L       R8,@-R15
    00000E5E E539                   MOV         #57,R5
    00000E60 BA4C                   BSR         _drawPatern
    00000E62 E46B                   MOV         #107,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   355            drawPatern(114, 59, 5, 4, confirmIcon, 1);
    00000E64 D852                   MOV.L       L1398+28,R8; _confirmIcon
    00000E66 E704                   MOV         #4,R7
    00000E68 2FB6                   MOV.L       R11,@-R15
    00000E6A E605                   MOV         #5,R6
    00000E6C 2F86                   MOV.L       R8,@-R15
    00000E6E E53B                   MOV         #59,R5
    00000E70 BA44                   BSR         _drawPatern
    00000E72 E472                   MOV         #114,R4
          WMCP.c   356    
          WMCP.c   357            Bdisp_PutDisp_DD();
    00000E74 D84F                   MOV.L       L1398+32,R8; _Bdisp_PutDisp_DD
    00000E76 480B                   JSR         @R8
    00000E78 7F40                   ADD         #64,R15
          WMCP.c   358    
          WMCP.c   359            GetKey(&key);
    00000E7A D44F                   MOV.L       L1398+36,R4; _key
    00000E7C B9A6                   BSR         _GetKeyMod
    00000E7E 0009                   NOP
    00000E80 D84D                   MOV.L       L1398+36,R8; _key
    00000E82 6082                   MOV.L       @R8,R0
    00000E84 882F                   CMP/EQ      #47,R0
    00000E86 8D03                   BT/S        L1255
    00000E88 6403                   MOV         R0,R4
    00000E8A 6082                   MOV.L       @R8,R0
    00000E8C 884F                   CMP/EQ      #79,R0
    00000E8E 8B01                   BF          L1254
    00000E90              L1255:                            
          WMCP.c   360            if (key == KEY_CTRL_EXIT || key == KEY_CTRL_F1) { return 0; }
    00000E90 A098                   BRA         L1256
    00000E92 E000                   MOV         #0,R0
    00000E94              L1254:                            
          WMCP.c   361            else if (key == KEY_CTRL_EXE || key == KEY_CTRL_F6) { return 1; }
    00000E94 6043                   MOV         R4,R0
    00000E96 881F                   CMP/EQ      #31,R0
    00000E98 8902                   BT          L1259
    00000E9A 6043                   MOV         R4,R0
    00000E9C 881D                   CMP/EQ      #29,R0
    00000E9E 8B01                   BF          L1258
    00000EA0              L1259:                            
    00000EA0 A090                   BRA         L1256
    00000EA2 E001                   MOV         #1,R0
    00000EA4              L1258:                            
          WMCP.c   362            else if (key == KEY_CTRL_F3) { handleCharacterSelectionMenu(); }
    00000EA4 883B                   CMP/EQ      #59,R0
    00000EA6 8B03                   BF          L1261
    00000EA8 BD28                   BSR         _handleCharacterSelectionMenu
    00000EAA 0009                   NOP
    00000EAC A055                   BRA         L1257
    00000EAE 0009                   NOP
    00000EB0              L1261:                            
          WMCP.c   363            else if (key == KEY_CTRL_F4) { uppercase = !uppercase; }
    00000EB0 6043                   MOV         R4,R0
    00000EB2 8831                   CMP/EQ      #49,R0
    00000EB4 8B04                   BF          L1263
    00000EB6 50F5                   MOV.L       @(20,R15),R0
    00000EB8 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EBA 0029                   MOVT        R0
    00000EBC A04D                   BRA         L1257
    00000EBE 1F05                   MOV.L       R0,@(20,R15)
    00000EC0              L1263:                            
          WMCP.c   364            else if (key == KEY_CTRL_LEFT) { if (contentCursor > 0) { contentCursor--; cursor -= stringContent
                         +[contentCursor]; } }
    00000EC0 8826                   CMP/EQ      #38,R0
    00000EC2 8B08                   BF          L1266
    00000EC4 E300                   MOV         #0,R3
    00000EC6 3D36                   CMP/HI      R3,R13
    00000EC8 8B47                   BF          L1257
    00000ECA 7DFF                   ADD         #-1,R13
    00000ECC 60D3                   MOV         R13,R0
    00000ECE 4000                   SHLL        R0
    00000ED0 02AD                   MOV.W       @(R0,R10),R2
    00000ED2 A042                   BRA         L1257
    00000ED4 3928                   SUB         R2,R9
    00000ED6              L1266:                            
          WMCP.c   365            else if (key == KEY_CTRL_RIGHT) { if (contentCursor < maxChar && stringContent[contentCursor]) { c
                         +ursor += stringContent[contentCursor]; contentCursor++; } }
    00000ED6 6043                   MOV         R4,R0
    00000ED8 881B                   CMP/EQ      #27,R0
    00000EDA 8B0D                   BF          L1269
    00000EDC 53F1                   MOV.L       @(4,R15),R3
    00000EDE 3D32                   CMP/HS      R3,R13
    00000EE0 893B                   BT          L1257
    00000EE2 60D3                   MOV         R13,R0
    00000EE4 4000                   SHLL        R0
    00000EE6 03AD                   MOV.W       @(R0,R10),R3
    00000EE8 2338                   TST         R3,R3
    00000EEA 8936                   BT          L1257
    00000EEC 60D3                   MOV         R13,R0
    00000EEE 4000                   SHLL        R0
    00000EF0 03AD                   MOV.W       @(R0,R10),R3
    00000EF2 393C                   ADD         R3,R9
    00000EF4 A031                   BRA         L1257
    00000EF6 7D01                   ADD         #1,R13
    00000EF8              L1269:                            
          WMCP.c   366            else if (key == KEY_CTRL_DEL) {
    00000EF8 882C                   CMP/EQ      #44,R0
    00000EFA 8B28                   BF          L1272
          WMCP.c   367                if (contentCursor > 0) {
    00000EFC E200                   MOV         #0,R2
    00000EFE 3D26                   CMP/HI      R2,R13
    00000F00 8B2B                   BF          L1257
          WMCP.c   368                    contentCursor--;
    00000F02 7DFF                   ADD         #-1,R13
          WMCP.c   369                    cursor -= stringContent[contentCursor];
    00000F04 61D3                   MOV         R13,R1
    00000F06 4100                   SHLL        R1
    00000F08 31AC                   ADD         R10,R1
    00000F0A 1F13                   MOV.L       R1,@(12,R15)
    00000F0C 6311                   MOV.W       @R1,R3
    00000F0E 3938                   SUB         R3,R9
          WMCP.c   370    
          WMCP.c   371                    memmove(&string[cursor], &string[cursor + stringContent[contentCursor]], strlen(string) - 
                         +cursor);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F10 D32A                   MOV.L       L1398+40,R3; _strlen
    00000F12 430B                   JSR         @R3
    00000F14 54F2                   MOV.L       @(8,R15),R4
    00000F16 6603                   MOV         R0,R6
    00000F18 55F3                   MOV.L       @(12,R15),R5
    00000F1A 3698                   SUB         R9,R6
    00000F1C 53F2                   MOV.L       @(8,R15),R3
    00000F1E 6551                   MOV.W       @R5,R5
    00000F20 353C                   ADD         R3,R5
    00000F22 359C                   ADD         R9,R5
    00000F24 6433                   MOV         R3,R4
    00000F26 D326                   MOV.L       L1398+44,R3; _memmove
    00000F28 430B                   JSR         @R3
    00000F2A 349C                   ADD         R9,R4
          WMCP.c   372    
          WMCP.c   373                    for (i = contentCursor; i < maxChar - 1; i++) { stringContent[i] = stringContent[i+1]; }
    00000F2C 53F4                   MOV.L       @(16,R15),R3
    00000F2E 65D3                   MOV         R13,R5
    00000F30 64D3                   MOV         R13,R4
    00000F32 4400                   SHLL        R4
    00000F34 3532                   CMP/HS      R3,R5
    00000F36 8D07                   BT/S        L1274
    00000F38 34AC                   ADD         R10,R4
    00000F3A              L1275:                            
    00000F3A 7501                   ADD         #1,R5
    00000F3C 8541                   MOV.W       @(2,R4),R0
    00000F3E 2401                   MOV.W       R0,@R4
    00000F40 53F4                   MOV.L       @(16,R15),R3
    00000F42 3532                   CMP/HS      R3,R5
    00000F44 8FF9                   BF/S        L1275
    00000F46 7402                   ADD         #2,R4
    00000F48              L1274:                            
          WMCP.c   374                    stringContent[maxChar - 1] = 0;
    00000F48 51F8                   MOV.L       @(32,R15),R1
    00000F4A A006                   BRA         L1257
    00000F4C 21E1                   MOV.W       R14,@R1
    00000F4E              L1272:                            
          WMCP.c   375                }
          WMCP.c   376            }
          WMCP.c   377            else if (cursor < maxChar) {
    00000F4E 52F1                   MOV.L       @(4,R15),R2
    00000F50 3922                   CMP/HS      R2,R9
    00000F52 8902                   BT          L1257
          WMCP.c   378                keyBuffer = handleKeyboard(key, keyState, uppercase);
    00000F54 56F5                   MOV.L       @(20,R15),R6
    00000F56 BA12                   BSR         _handleKeyboard
    00000F58 65C3                   MOV         R12,R5
    00000F5A              L1257:                            
    00000F5A 6082                   MOV.L       @R8,R0
    00000F5C 884E                   CMP/EQ      #78,R0
    00000F5E 8F05                   BF/S        L1278
    00000F60 6403                   MOV         R0,R4
          WMCP.c   379                
          WMCP.c   380            }
          WMCP.c   381    
          WMCP.c   382            if (key == KEY_CTRL_SHIFT) { if (keyState == 1) { keyState = 0; } else { keyState = 1; }}
    00000F62 60C3                   MOV         R12,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F64 8801                   CMP/EQ      #1,R0
    00000F66 8913                   BT          L896
    00000F68 AEBE                   BRA         L1247
    00000F6A 6CB3                   MOV         R11,R12
    00000F6C              L1278:                            
          WMCP.c   383            else if (key == KEY_CTRL_ALPHA) { if (keyState == 0) { keyState = 2; } else if (keyState == 1) { k
                         +eyState = 3; } else { keyState = 0; } }
    00000F6C 6043                   MOV         R4,R0
    00000F6E 884D                   CMP/EQ      #77,R0
    00000F70 8B09                   BF          L1282
    00000F72 2CC8                   TST         R12,R12
    00000F74 8B01                   BF          L1283
    00000F76 AEB7                   BRA         L1247
    00000F78 EC02                   MOV         #2,R12
    00000F7A              L1283:                            
    00000F7A 60C3                   MOV         R12,R0
    00000F7C 8801                   CMP/EQ      #1,R0
    00000F7E 8B07                   BF          L896
    00000F80 E403                   MOV         #3,R4
    00000F82 AEB1                   BRA         L1247
    00000F84 6C43                   MOV         R4,R12
    00000F86              L1282:                            
          WMCP.c   384            else if (keyState != 3) { keyState = 0; }
    00000F86 60C3                   MOV         R12,R0
    00000F88 8803                   CMP/EQ      #3,R0
    00000F8A 8B01                   BF          L1399
    00000F8C AEAC                   BRA         L1247
    00000F8E 0009                   NOP
    00000F90              L1399:                            
    00000F90              L896:
    00000F90 AEAA                   BRA         L1247
    00000F92 6CE3                   MOV         R14,R12
    00000F94              L1398:                            
    00000F94 <00000000>             .DATA.L     L770
    00000F98 <00000000>             .DATA.L     _PrintMini
    00000F9C <00000000>             .DATA.L     _filledActionButtonBg
    00000FA0 <00000000>             .DATA.L     _cancelIcon
    00000FA4 <00000000>             .DATA.L     _characterSelectionIcon
    00000FA8 <00000000>             .DATA.L     _actionButtonBg
    00000FAC <00000000>             .DATA.L     _uppercaseToLowercaseIcon
    00000FB0 <00000000>             .DATA.L     _confirmIcon
    00000FB4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000FB8 <00000000>             .DATA.L     _key
    00000FBC <00000000>             .DATA.L     _strlen
    00000FC0 <00000000>             .DATA.L     _memmove
    00000FC4              L1256:                            
          WMCP.c   385        }
          WMCP.c   386    }
    00000FC4 9170                   MOV.W       L1400,R1   ; H'00A8
    00000FC6 3F1C                   ADD         R1,R15
    00000FC8 4F26                   LDS.L       @R15+,PR
    00000FCA 68F6                   MOV.L       @R15+,R8
    00000FCC 69F6                   MOV.L       @R15+,R9
    00000FCE 6AF6                   MOV.L       @R15+,R10
    00000FD0 6BF6                   MOV.L       @R15+,R11
    00000FD2 6CF6                   MOV.L       @R15+,R12
    00000FD4 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FD6 000B                   RTS
    00000FD8 6EF6                   MOV.L       @R15+,R14
          WMCP.c   387    
          WMCP.c   388    int handleMainMenu() {
    00000FDA              _handleMainMenu:                 ; function: handleMainMenu
                                                           ; frame size=1080
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    00000FDA 2FE6                   MOV.L       R14,@-R15
    00000FDC 2FD6                   MOV.L       R13,@-R15
    00000FDE EE00                   MOV         #0,R14
          WMCP.c   389        const unsigned char selectedGroupBg[] = {
          WMCP.c   390            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
          WMCP.c   391            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   392            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   393            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   394            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   395            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   396            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   397            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          WMCP.c   398            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         + 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
          WMCP.c   399        };
    00000FE0 9164                   MOV.W       L1400+4,R1 ; H'019C
    00000FE2 2FC6                   MOV.L       R12,@-R15
    00000FE4 2FB6                   MOV.L       R11,@-R15
    00000FE6 2FA6                   MOV.L       R10,@-R15
    00000FE8 2F96                   MOV.L       R9,@-R15
    00000FEA 2F86                   MOV.L       R8,@-R15
    00000FEC 4F22                   STS.L       PR,@-R15
    00000FEE 4F12                   STS.L       MACL,@-R15
    00000FF0 905B                   MOV.W       L1400+2,R0 ; H'FC2C
    00000FF2 3F0C                   ADD         R0,R15
    00000FF4 D231                   MOV.L       L1400+20,R2; L794
    00000FF6 905A                   MOV.W       L1400+6,R0 ; H'0237
    00000FF8 D331                   MOV.L       L1400+24,R3; __slow_mvn
    00000FFA 430B                   JSR         @R3
    00000FFC 31FC                   ADD         R15,R1
          WMCP.c   400        const unsigned char noGroupFoundIcon[] = {
          WMCP.c   401            1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
          WMCP.c   402            1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
          WMCP.c   403            1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
          WMCP.c   404            1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
          WMCP.c   405            1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
          WMCP.c   406            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c   407            1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
          WMCP.c   408            1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,
          WMCP.c   409            1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
          WMCP.c   410            1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   411            1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
          WMCP.c   412            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c   413            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          WMCP.c   414            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
          WMCP.c   415        };
    00000FFE 9157                   MOV.W       L1400+8,R1 ; H'0100
    00001000 D230                   MOV.L       L1400+28,R2; L796
    00001002 9056                   MOV.W       L1400+10,R0; H'009A
    00001004 D32E                   MOV.L       L1400+24,R3; __slow_mvn
    00001006 430B                   JSR         @R3
    00001008 31FC                   ADD         R15,R1
          WMCP.c   416        const unsigned char settingsIcon[] = {
          WMCP.c   417            0, 1, 0, 1, 0,
          WMCP.c   418            0, 1, 1, 1, 0,
          WMCP.c   419            1, 1, 0, 1, 1,
          WMCP.c   420            0, 1, 1, 1, 0,
          WMCP.c   421            0, 1, 0, 1, 0
          WMCP.c   422        };
    0000100A 9153                   MOV.W       L1400+12,R1; H'00E4
    0000100C D22E                   MOV.L       L1400+32,R2; L798
    0000100E 31FC                   ADD         R15,R1
    00001010 D32B                   MOV.L       L1400+24,R3; __slow_mvn
    00001012 430B                   JSR         @R3
    00001014 E019                   MOV         #25,R0
          WMCP.c   423        const unsigned char refreshIcon[] = {
          WMCP.c   424            1, 1, 1, 0, 0,
          WMCP.c   425            0, 1, 1, 0, 0,
          WMCP.c   426            1, 0, 1, 0, 1,
          WMCP.c   427            1, 0, 0, 0, 1,
          WMCP.c   428            0, 1, 1, 1, 0
          WMCP.c   429        };
    00001016 914E                   MOV.W       L1400+14,R1; H'00C8
    00001018 D22C                   MOV.L       L1400+36,R2; L800
    0000101A 31FC                   ADD         R15,R1
    0000101C D328                   MOV.L       L1400+24,R3; __slow_mvn
    0000101E 430B                   JSR         @R3
    00001020 E019                   MOV         #25,R0
          WMCP.c   430        const unsigned char editIcon[] = {
          WMCP.c   431            0, 0, 0, 1, 0, 0, 0,
          WMCP.c   432            0, 0, 1, 1, 1, 0, 0,
          WMCP.c   433            0, 1, 1, 1, 0, 0, 0,
          WMCP.c   434            1, 0, 1, 0, 0, 0, 0,
          WMCP.c   435            1, 1, 0, 1, 1, 1, 1
          WMCP.c   436        };
    00001022 9149                   MOV.W       L1400+16,R1; H'00A4
    00001024 D22A                   MOV.L       L1400+40,R2; L802
    00001026 31FC                   ADD         R15,R1
    00001028 D325                   MOV.L       L1400+24,R3; __slow_mvn
    0000102A 430B                   JSR         @R3
    0000102C E023                   MOV         #35,R0
          WMCP.c   437        const unsigned char upArrow[] = {
          WMCP.c   438            0, 0, 1, 1, 0, 0,
          WMCP.c   439            0, 1, 1, 1, 1, 0,
          WMCP.c   440            1, 1, 1, 1, 1, 1
          WMCP.c   441        };
    0000102E 9144                   MOV.W       L1400+18,R1; H'0090
    00001030 D228                   MOV.L       L1400+44,R2; L804




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001032 31FC                   ADD         R15,R1
    00001034 D322                   MOV.L       L1400+24,R3; __slow_mvn
    00001036 430B                   JSR         @R3
    00001038 E012                   MOV         #18,R0
          WMCP.c   442        const unsigned char downArrow[] = {
          WMCP.c   443            1, 1, 1, 1, 1, 1,
          WMCP.c   444            0, 1, 1, 1, 1, 0,
          WMCP.c   445            0, 0, 1, 1, 0, 0
          WMCP.c   446        };
    0000103A 61F3                   MOV         R15,R1
    0000103C D226                   MOV.L       L1400+48,R2; L806
    0000103E 717C                   ADD         #124,R1
    00001040 D31F                   MOV.L       L1400+24,R3; __slow_mvn
    00001042 430B                   JSR         @R3
    00001044 E012                   MOV         #18,R0
          WMCP.c   447        const unsigned char miniUpArrow[] = {
          WMCP.c   448            0, 1, 0,
          WMCP.c   449            1, 1, 1
          WMCP.c   450        };
    00001046 61F3                   MOV         R15,R1
    00001048 D224                   MOV.L       L1400+52,R2; L808
    0000104A 7174                   ADD         #116,R1
    0000104C D31C                   MOV.L       L1400+24,R3; __slow_mvn
    0000104E 430B                   JSR         @R3
    00001050 E006                   MOV         #6,R0
          WMCP.c   451        const unsigned char miniDownArrow[] = {
          WMCP.c   452            1, 1, 1,
          WMCP.c   453            0, 1, 0
          WMCP.c   454        };
    00001052 61F3                   MOV         R15,R1
    00001054 D222                   MOV.L       L1400+56,R2; L810
    00001056 716C                   ADD         #108,R1
    00001058 D319                   MOV.L       L1400+24,R3; __slow_mvn
    0000105A 430B                   JSR         @R3
    0000105C E006                   MOV         #6,R0
          WMCP.c   455    
          WMCP.c   456        int i, j, k;
          WMCP.c   457        int mode = 0;
          WMCP.c   458        int hasGroupNameChanged = 0;
          WMCP.c   459        
          WMCP.c   460        char numOfGroups = 0;
    0000105E E014                   MOV         #20,R0
          WMCP.c   461        int selectedGroup = 0;
          WMCP.c   462        int onPageCursor = 0;
          WMCP.c   463        int currentPage = -1;
          WMCP.c   464    
          WMCP.c   465        char currentGroupNames[4][21] = {
          WMCP.c   466            "Error #404",
          WMCP.c   467            "Error #404",
          WMCP.c   468            "Error #404",
          WMCP.c   469            "Error #404"
          WMCP.c   470        };
    00001060 D220                   MOV.L       L1400+60,R2; L821
    00001062 6BE3                   MOV         R14,R11
    00001064 D316                   MOV.L       L1400+24,R3; __slow_mvn
    00001066 E8FF                   MOV         #-1,R8
    00001068 0FE4                   MOV.B       R14,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000106A 61F3                   MOV         R15,R1
    0000106C 1FE2                   MOV.L       R14,@(8,R15)
    0000106E 7118                   ADD         #24,R1
    00001070 430B                   JSR         @R3
    00001072 E054                   MOV         #84,R0
          WMCP.c   471    
          WMCP.c   472        while (1) {
    00001074              L1290:                            
          WMCP.c   473            Serial_WriteByte(1);
    00001074 DC1C                   MOV.L       L1400+64,R12; _Serial_WriteByte
    00001076 4C0B                   JSR         @R12
    00001078 E401                   MOV         #1,R4
          WMCP.c   474            Serial_WriteByte(0x20);
    0000107A 4C0B                   JSR         @R12
    0000107C E420                   MOV         #32,R4
          WMCP.c   475    
          WMCP.c   476            cooldown = 20;
    0000107E E414                   MOV         #20,R4
    00001080 DD1A                   MOV.L       L1400+68,R13; _cooldown
          WMCP.c   477            while (cooldown && Serial_ReadByte(&readLength) == 1) { cooldown--; Sleep(10); }
    00001082 A006                   BRA         L1291
    00001084 2D42                   MOV.L       R4,@R13
    00001086              L1292:                            
    00001086 62D2                   MOV.L       @R13,R2
    00001088 D319                   MOV.L       L1400+72,R3; _Sleep
    0000108A 72FF                   ADD         #-1,R2
    0000108C 2D22                   MOV.L       R2,@R13
    0000108E 430B                   JSR         @R3
    00001090 E40A                   MOV         #10,R4
    00001092              L1291:                            
    00001092 62D2                   MOV.L       @R13,R2
    00001094 2228                   TST         R2,R2
    00001096 8941                   BT          L1296
    00001098 D416                   MOV.L       L1400+76,R4; _readLength
    0000109A D317                   MOV.L       L1400+80,R3; _Serial_ReadByte
    0000109C 430B                   JSR         @R3
    0000109E 0009                   NOP
    000010A0 8801                   CMP/EQ      #1,R0
    000010A2 89F0                   BT          L1292
          WMCP.c   478            while (cooldown && Serial_GetRxBufferSize() < readLength) { cooldown--; Sleep(10); }
    000010A4 A030                   BRA         L1294
    000010A6 0009                   NOP
    000010A8              L1400:                            
    000010A8 00A8                   .DATA.W     H'00A8
    000010AA FC2C                   .DATA.W     H'FC2C
    000010AC 019C                   .DATA.W     H'019C
    000010AE 0237                   .DATA.W     H'0237
    000010B0 0100                   .DATA.W     H'0100
    000010B2 009A                   .DATA.W     H'009A
    000010B4 00E4                   .DATA.W     H'00E4
    000010B6 00C8                   .DATA.W     H'00C8
    000010B8 00A4                   .DATA.W     H'00A4
    000010BA 0090                   .DATA.W     H'0090
    000010BC <00000000>             .DATA.L     L794
    000010C0 <00000000>             .DATA.L     __slow_mvn
    000010C4 <00000000>             .DATA.L     L796
    000010C8 <00000000>             .DATA.L     L798




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010CC <00000000>             .DATA.L     L800
    000010D0 <00000000>             .DATA.L     L802
    000010D4 <00000000>             .DATA.L     L804
    000010D8 <00000000>             .DATA.L     L806
    000010DC <00000000>             .DATA.L     L808
    000010E0 <00000000>             .DATA.L     L810
    000010E4 <00000000>             .DATA.L     L821
    000010E8 <00000000>             .DATA.L     _Serial_WriteByte
    000010EC <00000000>             .DATA.L     _cooldown
    000010F0 <00000000>             .DATA.L     _Sleep
    000010F4 <00000000>             .DATA.L     _readLength
    000010F8 <00000000>             .DATA.L     _Serial_ReadByte
    000010FC              L1295:                            
    000010FC 62D2                   MOV.L       @R13,R2
    000010FE 72FF                   ADD         #-1,R2
    00001100 2D22                   MOV.L       R2,@R13
    00001102 D33C                   MOV.L       L1401+2,R3 ; _Sleep
    00001104 430B                   JSR         @R3
    00001106 E40A                   MOV         #10,R4
    00001108              L1294:                            
    00001108 62D2                   MOV.L       @R13,R2
    0000110A 2228                   TST         R2,R2
    0000110C 8906                   BT          L1296
    0000110E D33A                   MOV.L       L1401+6,R3 ; _Serial_GetRxBufferSize
    00001110 430B                   JSR         @R3
    00001112 0009                   NOP
    00001114 D339                   MOV.L       L1401+10,R3; _readLength
    00001116 6230                   MOV.B       @R3,R2
    00001118 3023                   CMP/GE      R2,R0
    0000111A 8BEF                   BF          L1295
    0000111C              L1296:                            
          WMCP.c   479            if (cooldown) {
    0000111C 63D2                   MOV.L       @R13,R3
    0000111E 2338                   TST         R3,R3
    00001120 8915                   BT          L1297
          WMCP.c   480                Serial_ReadBytes(readBuffer, readLength, &size);
    00001122 D637                   MOV.L       L1401+14,R6; _size
    00001124 D335                   MOV.L       L1401+10,R3; _readLength
    00001126 6530                   MOV.B       @R3,R5
    00001128 D236                   MOV.L       L1401+18,R2; _readBuffer
    0000112A D137                   MOV.L       L1401+22,R1; _Serial_ReadBytes
    0000112C 410B                   JSR         @R1
    0000112E 6422                   MOV.L       @R2,R4
          WMCP.c   481                if (size == 2 && readBuffer[0] == 0x21) { numOfGroups = readBuffer[1]; }
    00001130 D433                   MOV.L       L1401+14,R4; _size
    00001132 6041                   MOV.W       @R4,R0
    00001134 8802                   CMP/EQ      #2,R0
    00001136 8B0A                   BF          L1297
    00001138 D332                   MOV.L       L1401+18,R3; _readBuffer
    0000113A 6032                   MOV.L       @R3,R0
    0000113C 6000                   MOV.B       @R0,R0
    0000113E 8821                   CMP/EQ      #33,R0
    00001140 8B05                   BF          L1297
    00001142 61F3                   MOV         R15,R1
    00001144 D22F                   MOV.L       L1401+18,R2; _readBuffer
    00001146 7114                   ADD         #20,R1
    00001148 6322                   MOV.L       @R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000114A 8431                   MOV.B       @(1,R3),R0
    0000114C 2100                   MOV.B       R0,@R1
    0000114E              L1297:                            
    0000114E EA01                   MOV         #1,R10
    00001150 E014                   MOV         #20,R0
    00001152 03FC                   MOV.B       @(R0,R15),R3
    00001154 2338                   TST         R3,R3
    00001156 8D04                   BT/S        L1300
    00001158 1F31                   MOV.L       R3,@(4,R15)
    0000115A D22C                   MOV.L       L1401+26,R2; _cooldown
    0000115C 6122                   MOV.L       @R2,R1
    0000115E 2118                   TST         R1,R1
    00001160 8B02                   BF          L1299
    00001162              L1300:                            
          WMCP.c   482            }
          WMCP.c   483    
          WMCP.c   484            if (numOfGroups == 0 || cooldown == 0) { mode = 0; selectedGroup = 0; }
    00001162 69E3                   MOV         R14,R9
    00001164 A009                   BRA         L1301
    00001166 6BE3                   MOV         R14,R11
    00001168              L1299:                            
          WMCP.c   485            else if (numOfGroups <= 4 ) { mode = 1; currentPage = 0; }
    00001168 53F1                   MOV.L       @(4,R15),R3
    0000116A E204                   MOV         #4,R2
    0000116C 3327                   CMP/GT      R2,R3
    0000116E 8902                   BT          L1302
    00001170 69A3                   MOV         R10,R9
    00001172 A002                   BRA         L1301
    00001174 68E3                   MOV         R14,R8
    00001176              L1302:                            
          WMCP.c   486            else { mode = 2; }
    00001176 E402                   MOV         #2,R4
    00001178 6943                   MOV         R4,R9
    0000117A              L1301:                            
    0000117A 64B3                   MOV         R11,R4
    0000117C 4411                   CMP/PZ      R4
    0000117E 8900                   BT          L1305
    00001180 7403                   ADD         #3,R4
    00001182              L1305:                            
    00001182 4421                   SHAR        R4
    00001184 4421                   SHAR        R4
    00001186 3840                   CMP/EQ      R4,R8
    00001188 8976                   BT          L1304
          WMCP.c   487    
          WMCP.c   488            if (currentPage != (int)(selectedGroup / 4)) {
          WMCP.c   489                currentPage = (int)(selectedGroup / 4);
    0000118A 6843                   MOV         R4,R8
          WMCP.c   490                for (i = 0; i < 4; i++) {
    0000118C 2FE2                   MOV.L       R14,@R15
    0000118E E010                   MOV         #16,R0
    00001190 6383                   MOV         R8,R3
    00001192 4308                   SHLL2       R3
    00001194 1F33                   MOV.L       R3,@(12,R15)
    00001196 6283                   MOV         R8,R2
    00001198 4208                   SHLL2       R2
    0000119A A069                   BRA         L1306
    0000119C 0F24                   MOV.B       R2,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000119E              L1307:                            
          WMCP.c   491                    if (i+currentPage*4 < numOfGroups) {
    0000119E 63F2                   MOV.L       @R15,R3
    000011A0 51F3                   MOV.L       @(12,R15),R1
    000011A2 313C                   ADD         R3,R1
    000011A4 52F1                   MOV.L       @(4,R15),R2
    000011A6 3123                   CMP/GE      R2,R1
    000011A8 895F                   BT          L1313
          WMCP.c   492                        Serial_WriteByte(2);
    000011AA 4C0B                   JSR         @R12
    000011AC E402                   MOV         #2,R4
          WMCP.c   493                        Serial_WriteByte(0x22);
    000011AE 4C0B                   JSR         @R12
    000011B0 E422                   MOV         #34,R4
          WMCP.c   494                        Serial_WriteByte(i+currentPage*4);
    000011B2 E010                   MOV         #16,R0
    000011B4 64F2                   MOV.L       @R15,R4
    000011B6 03FC                   MOV.B       @(R0,R15),R3
    000011B8 4C0B                   JSR         @R12
    000011BA 343C                   ADD         R3,R4
          WMCP.c   495    
          WMCP.c   496                        cooldown = 50;
    000011BC E432                   MOV         #50,R4
          WMCP.c   497                        while (cooldown && Serial_ReadByte(&readLength) == 1) { cooldown--; Sleep(10); }
    000011BE A006                   BRA         L1309
    000011C0 2D42                   MOV.L       R4,@R13
    000011C2              L1310:                            
    000011C2 62D2                   MOV.L       @R13,R2
    000011C4 D30B                   MOV.L       L1401+2,R3 ; _Sleep
    000011C6 72FF                   ADD         #-1,R2
    000011C8 2D22                   MOV.L       R2,@R13
    000011CA 430B                   JSR         @R3
    000011CC E40A                   MOV         #10,R4
    000011CE              L1309:                            
    000011CE 62D2                   MOV.L       @R13,R2
    000011D0 2228                   TST         R2,R2
    000011D2 8905                   BT          L1311
    000011D4 D409                   MOV.L       L1401+10,R4; _readLength
    000011D6 D30E                   MOV.L       L1401+30,R3; _Serial_ReadByte
    000011D8 430B                   JSR         @R3
    000011DA 0009                   NOP
    000011DC 8801                   CMP/EQ      #1,R0
    000011DE 89F0                   BT          L1310
    000011E0              L1311:                            
          WMCP.c   498                        if (readLength < 22) { i--; continue; }
    000011E0 D206                   MOV.L       L1401+10,R2; _readLength
    000011E2 E416                   MOV         #22,R4
    000011E4 6320                   MOV.B       @R2,R3
    000011E6 3343                   CMP/GE      R4,R3
    000011E8 891A                   BT          L1314
    000011EA 61F2                   MOV.L       @R15,R1
    000011EC 71FF                   ADD         #-1,R1
    000011EE A03C                   BRA         L1313
    000011F0 2F12                   MOV.L       R1,@R15
    000011F2              L1401:                            
    000011F2 0000                   .DATA.W     0
    000011F4 <00000000>             .DATA.L     _Sleep




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011F8 <00000000>             .DATA.L     _Serial_GetRxBufferSize
    000011FC <00000000>             .DATA.L     _readLength
    00001200 <00000000>             .DATA.L     _size
    00001204 <00000000>             .DATA.L     _readBuffer
    00001208 <00000000>             .DATA.L     _Serial_ReadBytes
    0000120C <00000000>             .DATA.L     _cooldown
    00001210 <00000000>             .DATA.L     _Serial_ReadByte
    00001214              L1315:                            
          WMCP.c   499                        while (cooldown && Serial_GetRxBufferSize() < readLength) { cooldown--; Sleep(10); }
    00001214 63D2                   MOV.L       @R13,R3
    00001216 73FF                   ADD         #-1,R3
    00001218 2D32                   MOV.L       R3,@R13
    0000121A D239                   MOV.L       L1402+4,R2 ; _Sleep
    0000121C 420B                   JSR         @R2
    0000121E E40A                   MOV         #10,R4
    00001220              L1314:                            
    00001220 63D2                   MOV.L       @R13,R3
    00001222 2338                   TST         R3,R3
    00001224 8921                   BT          L1313
    00001226 D337                   MOV.L       L1402+8,R3 ; _Serial_GetRxBufferSize
    00001228 430B                   JSR         @R3
    0000122A 0009                   NOP
    0000122C D336                   MOV.L       L1402+12,R3; _readLength
    0000122E 6230                   MOV.B       @R3,R2
    00001230 3023                   CMP/GE      R2,R0
    00001232 8BEF                   BF          L1315
          WMCP.c   500                        if (cooldown) {
    00001234 63D2                   MOV.L       @R13,R3
    00001236 2338                   TST         R3,R3
    00001238 8917                   BT          L1313
          WMCP.c   501                            Serial_ReadBytes(readBuffer, readLength, &size);
    0000123A D634                   MOV.L       L1402+16,R6; _size
    0000123C D332                   MOV.L       L1402+12,R3; _readLength
    0000123E 6530                   MOV.B       @R3,R5
    00001240 D233                   MOV.L       L1402+20,R2; _readBuffer
    00001242 D134                   MOV.L       L1402+24,R1; _Serial_ReadBytes
    00001244 410B                   JSR         @R1
    00001246 6422                   MOV.L       @R2,R4
          WMCP.c   502                            if (readBuffer[0] == 0x23) { strncpy(currentGroupNames[i], readBuffer+1, 11); }
    00001248 D331                   MOV.L       L1402+20,R3; _readBuffer
    0000124A 6032                   MOV.L       @R3,R0
    0000124C 6000                   MOV.B       @R0,R0
    0000124E 8823                   CMP/EQ      #35,R0
    00001250 8B0B                   BF          L1313
    00001252 E60B                   MOV         #11,R6
    00001254 6532                   MOV.L       @R3,R5
    00001256 E215                   MOV         #21,R2
    00001258 61F2                   MOV.L       @R15,R1
    0000125A 7501                   ADD         #1,R5
    0000125C 0127                   MUL.L       R2,R1
    0000125E 62F3                   MOV         R15,R2
    00001260 D12D                   MOV.L       L1402+28,R1; _strncpy
    00001262 041A                   STS         MACL,R4
    00001264 7218                   ADD         #24,R2
    00001266 410B                   JSR         @R1
    00001268 342C                   ADD         R2,R4
    0000126A              L1313:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000126A 63F2                   MOV.L       @R15,R3
    0000126C 7301                   ADD         #1,R3
    0000126E 2F32                   MOV.L       R3,@R15
    00001270              L1306:                            
    00001270 61F2                   MOV.L       @R15,R1
    00001272 E204                   MOV         #4,R2
    00001274 3123                   CMP/GE      R2,R1
    00001276 8B92                   BF          L1307
    00001278              L1304:                            
          WMCP.c   503                        }
          WMCP.c   504                    }
          WMCP.c   505                }
          WMCP.c   506            }
          WMCP.c   507    
          WMCP.c   508            Bdisp_AllClr_VRAM();
    00001278 DD28                   MOV.L       L1402+32,R13; _Bdisp_AllClr_VRAM
    0000127A 4D0B                   JSR         @R13
    0000127C 0009                   NOP
          WMCP.c   509    
          WMCP.c   510            drawTitleBar("Messages");
    0000127E D428                   MOV.L       L1402+36,R4; L838
    00001280 B80E                   BSR         _drawTitleBar
    00001282 0009                   NOP
          WMCP.c   511            drawPatern(2, 57, 19, 7, filledActionButtonBg, 0);
    00001284 2FE6                   MOV.L       R14,@-R15
    00001286 E707                   MOV         #7,R7
    00001288 D326                   MOV.L       L1402+40,R3; _filledActionButtonBg
    0000128A E613                   MOV         #19,R6
    0000128C 2F36                   MOV.L       R3,@-R15
    0000128E E539                   MOV         #57,R5
    00001290 B834                   BSR         _drawPatern
    00001292 E402                   MOV         #2,R4
          WMCP.c   512            drawPatern(9, 58, 5, 5, cancelIcon, 1);
    00001294 DD24                   MOV.L       L1402+44,R13; _cancelIcon
    00001296 E705                   MOV         #5,R7
    00001298 2FA6                   MOV.L       R10,@-R15
    0000129A E53A                   MOV         #58,R5
    0000129C 2FD6                   MOV.L       R13,@-R15
    0000129E 6673                   MOV         R7,R6
    000012A0 B82C                   BSR         _drawPatern
    000012A2 E409                   MOV         #9,R4
          WMCP.c   513            if (mode) {
    000012A4 2998                   TST         R9,R9
    000012A6 8F02                   BF/S        L1403
    000012A8 7F10                   ADD         #16,R15
    000012AA A0F7                   BRA         L1319
    000012AC 0009                   NOP
    000012AE              L1403:                            
          WMCP.c   514                if (mode == 2) {
    000012AE 6093                   MOV         R9,R0
    000012B0 8802                   CMP/EQ      #2,R0
    000012B2 8B1E                   BF          L1320
          WMCP.c   515                    if (currentPage > 0) { drawPatern(61, 12, 6, 3, upArrow, 0); }
    000012B4 4815                   CMP/PL      R8
    000012B6 8B09                   BF          L1321
    000012B8 2FE6                   MOV.L       R14,@-R15
    000012BA E703                   MOV         #3,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012BC 931E                   MOV.W       L1402,R3   ; H'0094
    000012BE E606                   MOV         #6,R6
    000012C0 33FC                   ADD         R15,R3
    000012C2 E50C                   MOV         #12,R5
    000012C4 2F36                   MOV.L       R3,@-R15
    000012C6 B819                   BSR         _drawPatern
    000012C8 E43D                   MOV         #61,R4
    000012CA 7F08                   ADD         #8,R15
    000012CC              L1321:                            
          WMCP.c   516                    if (currentPage < (int)((numOfGroups-1) / 4)) { drawPatern(61, 53, 6, 3, downArrow, 0); }
    000012CC 53F1                   MOV.L       @(4,R15),R3
    000012CE 73FF                   ADD         #-1,R3
    000012D0 4311                   CMP/PZ      R3
    000012D2 8900                   BT          L1323
    000012D4 7303                   ADD         #3,R3
    000012D6              L1323:                            
    000012D6 4321                   SHAR        R3
    000012D8 4321                   SHAR        R3
    000012DA 3833                   CMP/GE      R3,R8
    000012DC 8909                   BT          L1320
    000012DE E703                   MOV         #3,R7
    000012E0 2FE6                   MOV.L       R14,@-R15
    000012E2 E606                   MOV         #6,R6
    000012E4 920B                   MOV.W       L1402+2,R2 ; H'0080
    000012E6 E535                   MOV         #53,R5
    000012E8 32FC                   ADD         R15,R2
    000012EA 2F26                   MOV.L       R2,@-R15
    000012EC B806                   BSR         _drawPatern
    000012EE E43D                   MOV         #61,R4
    000012F0 7F08                   ADD         #8,R15
    000012F2              L1320:                            
          WMCP.c   517                }
          WMCP.c   518                onPageCursor = selectedGroup % 4;
    000012F2 60B3                   MOV         R11,R0
    000012F4 4011                   CMP/PZ      R0
    000012F6 8B19                   BF          L1324
    000012F8 A01D                   BRA         L1325
    000012FA C903                   AND         #3,R0
    000012FC              L1402:                            
    000012FC 0094                   .DATA.W     H'0094
    000012FE 0080                   .DATA.W     H'0080
    00001300 <00000000>             .DATA.L     _Sleep
    00001304 <00000000>             .DATA.L     _Serial_GetRxBufferSize
    00001308 <00000000>             .DATA.L     _readLength
    0000130C <00000000>             .DATA.L     _size
    00001310 <00000000>             .DATA.L     _readBuffer
    00001314 <00000000>             .DATA.L     _Serial_ReadBytes
    00001318 <00000000>             .DATA.L     _strncpy
    0000131C <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00001320 <00000000>             .DATA.L     L838
    00001324 <00000000>             .DATA.L     _filledActionButtonBg
    00001328 <00000000>             .DATA.L     _cancelIcon
    0000132C              L1324:                            
    0000132C 6007                   NOT         R0,R0
    0000132E 7001                   ADD         #1,R0
    00001330 C903                   AND         #3,R0
    00001332 6007                   NOT         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001334 7001                   ADD         #1,R0
    00001336              L1325:                            
          WMCP.c   519                Bdisp_SetPoint_VRAM(30, 20 + onPageCursor * 9, 1);
    00001336 E601                   MOV         #1,R6
    00001338 D252                   MOV.L       L1404+8,R2 ; _Bdisp_SetPoint_VRAM
    0000133A 6D03                   MOV         R0,R13
    0000133C 1F02                   MOV.L       R0,@(8,R15)
    0000133E 6303                   MOV         R0,R3
    00001340 4D08                   SHLL2       R13
    00001342 4D00                   SHLL        R13
    00001344 3D3C                   ADD         R3,R13
    00001346 65D3                   MOV         R13,R5
    00001348 7514                   ADD         #20,R5
    0000134A 420B                   JSR         @R2
    0000134C E41E                   MOV         #30,R4
          WMCP.c   520                drawPatern(33, 16 + onPageCursor * 9, 63, 9, selectedGroupBg, 0);
    0000134E E709                   MOV         #9,R7
    00001350 D24D                   MOV.L       L1404+12,R2; _drawPatern
    00001352 E63F                   MOV         #63,R6
    00001354 2FE6                   MOV.L       R14,@-R15
    00001356 65D3                   MOV         R13,R5
    00001358 9390                   MOV.W       L1404,R3   ; H'01A0
    0000135A 7510                   ADD         #16,R5
    0000135C 33FC                   ADD         R15,R3
    0000135E 2F36                   MOV.L       R3,@-R15
    00001360 420B                   JSR         @R2
    00001362 E421                   MOV         #33,R4
          WMCP.c   521    
          WMCP.c   522                if (selectedGroup > 0) { drawPatern(29, 17 + onPageCursor * 9, 3, 2, miniUpArrow, 0); }
    00001364 4B15                   CMP/PL      R11
    00001366 8F0C                   BF/S        L1326
    00001368 7F08                   ADD         #8,R15
    0000136A E702                   MOV         #2,R7
    0000136C D346                   MOV.L       L1404+12,R3; _drawPatern
    0000136E E603                   MOV         #3,R6
    00001370 2FE6                   MOV.L       R14,@-R15
    00001372 65D3                   MOV         R13,R5
    00001374 62F3                   MOV         R15,R2
    00001376 7278                   ADD         #120,R2
    00001378 2F26                   MOV.L       R2,@-R15
    0000137A 7511                   ADD         #17,R5
    0000137C 430B                   JSR         @R3
    0000137E E41D                   MOV         #29,R4
    00001380 7F08                   ADD         #8,R15
    00001382              L1326:                            
          WMCP.c   523                if (selectedGroup < (numOfGroups-1)) { drawPatern(29, 22 + onPageCursor * 9, 3, 2, miniDownArr
                         +ow, 0); }
    00001382 52F1                   MOV.L       @(4,R15),R2
    00001384 72FF                   ADD         #-1,R2
    00001386 3B23                   CMP/GE      R2,R11
    00001388 890B                   BT          L1327
    0000138A E702                   MOV         #2,R7
    0000138C D33E                   MOV.L       L1404+12,R3; _drawPatern
    0000138E E603                   MOV         #3,R6
    00001390 2FE6                   MOV.L       R14,@-R15
    00001392 65D3                   MOV         R13,R5
    00001394 62F3                   MOV         R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001396 7270                   ADD         #112,R2
    00001398 2F26                   MOV.L       R2,@-R15
    0000139A 7516                   ADD         #22,R5
    0000139C 430B                   JSR         @R3
    0000139E E41D                   MOV         #29,R4
    000013A0 7F08                   ADD         #8,R15
    000013A2              L1327:                            
          WMCP.c   524    
          WMCP.c   525                for (i = 0; (i < numOfGroups-currentPage*4) && (i < 4); i++) {
    000013A2 6DE3                   MOV         R14,R13
    000013A4 53F1                   MOV.L       @(4,R15),R3
    000013A6 6283                   MOV         R8,R2
    000013A8 4208                   SHLL2       R2
    000013AA 3328                   SUB         R2,R3
    000013AC A013                   BRA         L1328
    000013AE 2F32                   MOV.L       R3,@R15
    000013B0              L1329:                            
          WMCP.c   526                    PrintXY(34, 17 + i * 9, currentGroupNames[i], (onPageCursor == i) ? 1 : 0);
    000013B0 51F2                   MOV.L       @(8,R15),R1
    000013B2 E615                   MOV         #21,R6
    000013B4 0D67                   MUL.L       R6,R13
    000013B6 63F3                   MOV         R15,R3
    000013B8 31D0                   CMP/EQ      R13,R1
    000013BA 0729                   MOVT        R7
    000013BC D133                   MOV.L       L1404+16,R1; _PrintXY
    000013BE 061A                   STS         MACL,R6
    000013C0 7318                   ADD         #24,R3
    000013C2 363C                   ADD         R3,R6
    000013C4 65D3                   MOV         R13,R5
    000013C6 62D3                   MOV         R13,R2
    000013C8 4508                   SHLL2       R5
    000013CA 4500                   SHLL        R5
    000013CC 352C                   ADD         R2,R5
    000013CE 7511                   ADD         #17,R5
    000013D0 410B                   JSR         @R1
    000013D2 E422                   MOV         #34,R4
    000013D4 7D01                   ADD         #1,R13
    000013D6              L1328:                            
    000013D6 63F2                   MOV.L       @R15,R3
    000013D8 3D33                   CMP/GE      R3,R13
    000013DA 8902                   BT          L1332
    000013DC E104                   MOV         #4,R1
    000013DE 3D13                   CMP/GE      R1,R13
    000013E0 8BE6                   BF          L1329
    000013E2              L1332:                            
          WMCP.c   527                }
          WMCP.c   528    
          WMCP.c   529                drawPatern(44, 57, 19, 7, filledActionButtonBg, 0);
    000013E2 E707                   MOV         #7,R7
    000013E4 D328                   MOV.L       L1404+12,R3; _drawPatern
    000013E6 E613                   MOV         #19,R6
    000013E8 2FE6                   MOV.L       R14,@-R15
    000013EA E539                   MOV         #57,R5
    000013EC D228                   MOV.L       L1404+20,R2; _filledActionButtonBg
    000013EE 2F26                   MOV.L       R2,@-R15
    000013F0 430B                   JSR         @R3
    000013F2 E42C                   MOV         #44,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   530                drawPatern(51, 58, 5, 5, settingsIcon, 1);
    000013F4 2FA6                   MOV.L       R10,@-R15
    000013F6 E705                   MOV         #5,R7
    000013F8 D323                   MOV.L       L1404+12,R3; _drawPatern
    000013FA E53A                   MOV         #58,R5
    000013FC 923F                   MOV.W       L1404+2,R2 ; H'00F0
    000013FE 6673                   MOV         R7,R6
    00001400 32FC                   ADD         R15,R2
    00001402 2F26                   MOV.L       R2,@-R15
    00001404 430B                   JSR         @R3
    00001406 E433                   MOV         #51,R4
          WMCP.c   531                drawPatern(65, 57, 19, 7, actionButtonBg, 0);
    00001408 2FE6                   MOV.L       R14,@-R15
    0000140A E707                   MOV         #7,R7
    0000140C D31E                   MOV.L       L1404+12,R3; _drawPatern
    0000140E E613                   MOV         #19,R6
    00001410 D220                   MOV.L       L1404+24,R2; _actionButtonBg
    00001412 E539                   MOV         #57,R5
    00001414 2F26                   MOV.L       R2,@-R15
    00001416 430B                   JSR         @R3
    00001418 E441                   MOV         #65,R4
          WMCP.c   532                drawPatern(72, 59, 5, 5, refreshIcon, 0);
    0000141A E705                   MOV         #5,R7
    0000141C D31A                   MOV.L       L1404+12,R3; _drawPatern
    0000141E E53B                   MOV         #59,R5
    00001420 2FE6                   MOV.L       R14,@-R15
    00001422 6673                   MOV         R7,R6
    00001424 922C                   MOV.W       L1404+4,R2 ; H'00E4
    00001426 32FC                   ADD         R15,R2
    00001428 2F26                   MOV.L       R2,@-R15
    0000142A 430B                   JSR         @R3
    0000142C E448                   MOV         #72,R4
          WMCP.c   533                drawPatern(86, 57, 19, 7, filledActionButtonBg, 0);
    0000142E E707                   MOV         #7,R7
    00001430 D315                   MOV.L       L1404+12,R3; _drawPatern
    00001432 E613                   MOV         #19,R6
    00001434 2FE6                   MOV.L       R14,@-R15
    00001436 E539                   MOV         #57,R5
    00001438 D215                   MOV.L       L1404+20,R2; _filledActionButtonBg
    0000143A 2F26                   MOV.L       R2,@-R15
    0000143C 430B                   JSR         @R3
    0000143E E456                   MOV         #86,R4
          WMCP.c   534                drawPatern(92, 58, 7, 5, editIcon, 1);
    00001440 2FA6                   MOV.L       R10,@-R15
    00001442 E705                   MOV         #5,R7
    00001444 D310                   MOV.L       L1404+12,R3; _drawPatern
    00001446 E607                   MOV         #7,R6
    00001448 921B                   MOV.W       L1404+6,R2 ; H'00D0
    0000144A E53A                   MOV         #58,R5
    0000144C 32FC                   ADD         R15,R2
    0000144E 2F26                   MOV.L       R2,@-R15
    00001450 430B                   JSR         @R3
    00001452 E45C                   MOV         #92,R4
          WMCP.c   535                drawPatern(107, 57, 19, 7, filledActionButtonBg, 0);
    00001454 2FE6                   MOV.L       R14,@-R15
    00001456 E707                   MOV         #7,R7
    00001458 D30B                   MOV.L       L1404+12,R3; _drawPatern




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000145A E613                   MOV         #19,R6
    0000145C D20C                   MOV.L       L1404+20,R2; _filledActionButtonBg
    0000145E E539                   MOV         #57,R5
    00001460 2F26                   MOV.L       R2,@-R15
    00001462 430B                   JSR         @R3
    00001464 E46B                   MOV         #107,R4
          WMCP.c   536                drawPatern(113, 58, 7, 5, proceedIcon, 1);
    00001466 E705                   MOV         #5,R7
    00001468 D207                   MOV.L       L1404+12,R2; _drawPatern
    0000146A E607                   MOV         #7,R6
    0000146C DD0A                   MOV.L       L1404+28,R13; _proceedIcon
    0000146E E53A                   MOV         #58,R5
    00001470 2FA6                   MOV.L       R10,@-R15
    00001472 2FD6                   MOV.L       R13,@-R15
    00001474 420B                   JSR         @R2
    00001476 E471                   MOV         #113,R4
    00001478 A048                   BRA         L1333
    0000147A 7F40                   ADD         #64,R15
    0000147C              L1404:                            
    0000147C 01A0                   .DATA.W     H'01A0
    0000147E 00F0                   .DATA.W     H'00F0
    00001480 00E4                   .DATA.W     H'00E4
    00001482 00D0                   .DATA.W     H'00D0
    00001484 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00001488 <00000000>             .DATA.L     _drawPatern
    0000148C <00000000>             .DATA.L     _PrintXY
    00001490 <00000000>             .DATA.L     _filledActionButtonBg
    00001494 <00000000>             .DATA.L     _actionButtonBg
    00001498 <00000000>             .DATA.L     _proceedIcon
    0000149C              L1319:                            
          WMCP.c   537            } else {
          WMCP.c   538                drawPatern(59, 21, 11, 14, noGroupFoundIcon, 0);
    0000149C 2FE6                   MOV.L       R14,@-R15
    0000149E E70E                   MOV         #14,R7
    000014A0 D331                   MOV.L       L1405+6,R3 ; _drawPatern
    000014A2 E60B                   MOV         #11,R6
    000014A4 925D                   MOV.W       L1405,R2   ; H'0104
    000014A6 E515                   MOV         #21,R5
    000014A8 32FC                   ADD         R15,R2
    000014AA 2F26                   MOV.L       R2,@-R15
    000014AC 430B                   JSR         @R3
    000014AE E43B                   MOV         #59,R4
          WMCP.c   539                PrintXY(21, 36, "No group found", 0);
    000014B0 DD2E                   MOV.L       L1405+10,R13; L847
    000014B2 E700                   MOV         #0,R7
    000014B4 D22E                   MOV.L       L1405+14,R2; _PrintXY
    000014B6 E524                   MOV         #36,R5
    000014B8 66D3                   MOV         R13,R6
    000014BA 420B                   JSR         @R2
    000014BC E415                   MOV         #21,R4
          WMCP.c   540                drawPatern(86, 57, 19, 7, filledActionButtonBg, 0);
    000014BE E707                   MOV         #7,R7
    000014C0 D229                   MOV.L       L1405+6,R2 ; _drawPatern
    000014C2 E613                   MOV         #19,R6
    000014C4 2FE6                   MOV.L       R14,@-R15
    000014C6 E539                   MOV         #57,R5
    000014C8 D32A                   MOV.L       L1405+18,R3; _filledActionButtonBg




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014CA 2F36                   MOV.L       R3,@-R15
    000014CC 420B                   JSR         @R2
    000014CE E456                   MOV         #86,R4
          WMCP.c   541                drawPatern(93, 58, 5, 5, settingsIcon, 1);
    000014D0 2FA6                   MOV.L       R10,@-R15
    000014D2 E705                   MOV         #5,R7
    000014D4 D224                   MOV.L       L1405+6,R2 ; _drawPatern
    000014D6 E53A                   MOV         #58,R5
    000014D8 9344                   MOV.W       L1405+2,R3 ; H'00F8
    000014DA 6673                   MOV         R7,R6
    000014DC 33FC                   ADD         R15,R3
    000014DE 2F36                   MOV.L       R3,@-R15
    000014E0 420B                   JSR         @R2
    000014E2 E45D                   MOV         #93,R4
          WMCP.c   542                drawPatern(107, 57, 19, 7, actionButtonBg, 0);
    000014E4 2FE6                   MOV.L       R14,@-R15
    000014E6 E707                   MOV         #7,R7
    000014E8 D21F                   MOV.L       L1405+6,R2 ; _drawPatern
    000014EA E613                   MOV         #19,R6
    000014EC D322                   MOV.L       L1405+22,R3; _actionButtonBg
    000014EE E539                   MOV         #57,R5
    000014F0 2F36                   MOV.L       R3,@-R15
    000014F2 420B                   JSR         @R2
    000014F4 E46B                   MOV         #107,R4
          WMCP.c   543                drawPatern(114, 59, 5, 5, refreshIcon, 0);
    000014F6 E705                   MOV         #5,R7
    000014F8 D21B                   MOV.L       L1405+6,R2 ; _drawPatern
    000014FA E53B                   MOV         #59,R5
    000014FC 2FE6                   MOV.L       R14,@-R15
    000014FE 6673                   MOV         R7,R6
    00001500 9331                   MOV.W       L1405+4,R3 ; H'00EC
    00001502 33FC                   ADD         R15,R3
    00001504 2F36                   MOV.L       R3,@-R15
    00001506 420B                   JSR         @R2
    00001508 E472                   MOV         #114,R4
    0000150A 7F28                   ADD         #40,R15
    0000150C              L1333:                            
          WMCP.c   544            }
          WMCP.c   545    
          WMCP.c   546            Bdisp_PutDisp_DD();
    0000150C DD1B                   MOV.L       L1405+26,R13; _Bdisp_PutDisp_DD
    0000150E 4D0B                   JSR         @R13
    00001510 0009                   NOP
          WMCP.c   547    
          WMCP.c   548            GetKey(&key);
    00001512 D41B                   MOV.L       L1405+30,R4; _key
    00001514 D31B                   MOV.L       L1405+34,R3; _GetKeyMod
    00001516 430B                   JSR         @R3
    00001518 0009                   NOP
    0000151A D519                   MOV.L       L1405+30,R5; _key
    0000151C 6052                   MOV.L       @R5,R0
    0000151E 884F                   CMP/EQ      #79,R0
    00001520 8D03                   BT/S        L1335
    00001522 6403                   MOV         R0,R4
    00001524 6052                   MOV.L       @R5,R0
    00001526 882F                   CMP/EQ      #47,R0
    00001528 8B01                   BF          L1334




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000152A              L1335:                            
          WMCP.c   549            if (key == KEY_CTRL_F1 || key == KEY_CTRL_EXIT) { return -1; }
    0000152A A06C                   BRA         L1336
    0000152C E0FF                   MOV         #-1,R0
    0000152E              L1334:                            
          WMCP.c   550            else if (key == KEY_CTRL_UP && selectedGroup > 0) { selectedGroup--; }
    0000152E 6043                   MOV         R4,R0
    00001530 881C                   CMP/EQ      #28,R0
    00001532 8B03                   BF          L1338
    00001534 4B15                   CMP/PL      R11
    00001536 8B01                   BF          L1338
    00001538 AD9C                   BRA         L1290
    0000153A 7BFF                   ADD         #-1,R11
    0000153C              L1338:                            
          WMCP.c   551            else if (key == KEY_CTRL_DOWN && selectedGroup < (numOfGroups-1)) { selectedGroup++; }
    0000153C 6043                   MOV         R4,R0
    0000153E 8825                   CMP/EQ      #37,R0
    00001540 8B05                   BF          L1340
    00001542 53F1                   MOV.L       @(4,R15),R3
    00001544 73FF                   ADD         #-1,R3
    00001546 3B33                   CMP/GE      R3,R11
    00001548 8901                   BT          L1340
    0000154A AD93                   BRA         L1290
    0000154C 7B01                   ADD         #1,R11
    0000154E              L1340:                            
          WMCP.c   552            else if ((key == KEY_CTRL_F6 || key == KEY_CTRL_EXE) && mode > 0) { return selectedGroup; }
    0000154E 6043                   MOV         R4,R0
    00001550 881D                   CMP/EQ      #29,R0
    00001552 8902                   BT          L1343
    00001554 6043                   MOV         R4,R0
    00001556 881F                   CMP/EQ      #31,R0
    00001558 8B16                   BF          L1342
    0000155A              L1343:                            
    0000155A 4915                   CMP/PL      R9
    0000155C 8B14                   BF          L1342
    0000155E A052                   BRA         L1336
    00001560 60B3                   MOV         R11,R0
    00001562              L1405:                            
    00001562 0104                   .DATA.W     H'0104
    00001564 00F8                   .DATA.W     H'00F8
    00001566 00EC                   .DATA.W     H'00EC
    00001568 <00000000>             .DATA.L     _drawPatern
    0000156C <00000000>             .DATA.L     L847
    00001570 <00000000>             .DATA.L     _PrintXY
    00001574 <00000000>             .DATA.L     _filledActionButtonBg
    00001578 <00000000>             .DATA.L     _actionButtonBg
    0000157C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001580 <00000000>             .DATA.L     _key
    00001584 <00000000>             .DATA.L     _GetKeyMod
    00001588              L1342:                            
          WMCP.c   553            else if ((key == KEY_CTRL_F5 && mode == 0) || (key == KEY_CTRL_F3 && mode > 0)) {}    // go to set
                         +tings
    00001588 6043                   MOV         R4,R0
    0000158A 8827                   CMP/EQ      #39,R0
    0000158C 8B03                   BF          L1347
    0000158E 2998                   TST         R9,R9
    00001590 8B01                   BF          L1406




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001592 AD6F                   BRA         L1290
    00001594 0009                   NOP
    00001596              L1406:                            
    00001596              L1347:                            
    00001596 6043                   MOV         R4,R0
    00001598 883B                   CMP/EQ      #59,R0
    0000159A 8B03                   BF          L1345
    0000159C 4915                   CMP/PL      R9
    0000159E 8B01                   BF          L1407
    000015A0 AD68                   BRA         L1290
    000015A2 0009                   NOP
    000015A4              L1407:                            
    000015A4              L1345:                            
          WMCP.c   554            else if ((key == KEY_CTRL_F6 && mode == 0) || (key == KEY_CTRL_F4 && mode > 0)) { currentPage = -1
                         +; }
    000015A4 6043                   MOV         R4,R0
    000015A6 881D                   CMP/EQ      #29,R0
    000015A8 8B01                   BF          L1351
    000015AA 2998                   TST         R9,R9
    000015AC 8929                   BT          L897
    000015AE              L1351:                            
    000015AE 6043                   MOV         R4,R0
    000015B0 8831                   CMP/EQ      #49,R0
    000015B2 8B01                   BF          L1349
    000015B4 4915                   CMP/PL      R9
    000015B6 8924                   BT          L897
    000015B8              L1349:                            
          WMCP.c   555            else if (key == KEY_CTRL_F5 && mode > 0) {
    000015B8 6043                   MOV         R4,R0
    000015BA 8827                   CMP/EQ      #39,R0
    000015BC 8901                   BT          L1408
    000015BE AD59                   BRA         L1290
    000015C0 0009                   NOP
    000015C2              L1408:                            
    000015C2 4915                   CMP/PL      R9
    000015C4 8901                   BT          L1409
    000015C6 AD55                   BRA         L1290
    000015C8 0009                   NOP
    000015CA              L1409:                            
          WMCP.c   556                hasGroupNameChanged = editStringMenu("Edit group name", currentGroupNames[onPageCursor], 10);
    000015CA E60A                   MOV         #10,R6
    000015CC 52F2                   MOV.L       @(8,R15),R2
    000015CE 65F3                   MOV         R15,R5
    000015D0 DA13                   MOV.L       L1410+2,R10; L855
    000015D2 E315                   MOV         #21,R3
    000015D4 0237                   MUL.L       R3,R2
    000015D6 7518                   ADD         #24,R5
    000015D8 0D1A                   STS         MACL,R13
    000015DA 35DC                   ADD         R13,R5
    000015DC BB01                   BSR         _editStringMenu
    000015DE 64A3                   MOV         R10,R4
    000015E0 6403                   MOV         R0,R4
          WMCP.c   557                if (hasGroupNameChanged) {
    000015E2 2448                   TST         R4,R4
    000015E4 890D                   BT          L897
          WMCP.c   558                    Serial_WriteByte(13);
    000015E6 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015E8 E40D                   MOV         #13,R4
          WMCP.c   559                    Serial_WriteByte(0x24);
    000015EA 4C0B                   JSR         @R12
    000015EC E424                   MOV         #36,R4
          WMCP.c   560                    Serial_WriteByte(selectedGroup);
    000015EE 4C0B                   JSR         @R12
    000015F0 64B3                   MOV         R11,R4
          WMCP.c   561                    Serial_WriteBytes(currentGroupNames[onPageCursor], 11);
    000015F2 E50B                   MOV         #11,R5
    000015F4 DC0B                   MOV.L       L1410+6,R12; _Serial_WriteBytes
    000015F6 64F3                   MOV         R15,R4
    000015F8 7418                   ADD         #24,R4
    000015FA 4C0B                   JSR         @R12
    000015FC 34DC                   ADD         R13,R4
    000015FE AD39                   BRA         L1290
    00001600 0009                   NOP
    00001602              L897:
    00001602 AD37                   BRA         L1290
          WMCP.c   562                } else { currentPage = -1; }
    00001604 E8FF                   MOV         #-1,R8
    00001606              L1336:                            
          WMCP.c   563            }
          WMCP.c   564        }
          WMCP.c   565    }
    00001606 910A                   MOV.W       L1410,R1   ; H'03D4
    00001608 3F1C                   ADD         R1,R15
    0000160A 4F16                   LDS.L       @R15+,MACL
    0000160C 4F26                   LDS.L       @R15+,PR
    0000160E 68F6                   MOV.L       @R15+,R8
    00001610 69F6                   MOV.L       @R15+,R9
    00001612 6AF6                   MOV.L       @R15+,R10
    00001614 6BF6                   MOV.L       @R15+,R11
    00001616 6CF6                   MOV.L       @R15+,R12
    00001618 6DF6                   MOV.L       @R15+,R13
    0000161A 000B                   RTS
    0000161C 6EF6                   MOV.L       @R15+,R14
    0000161E              L1410:                            
    0000161E 03D4                   .DATA.W     H'03D4
    00001620 <00000000>             .DATA.L     L855
    00001624 <00000000>             .DATA.L     _Serial_WriteBytes
          WMCP.c   566    
          WMCP.c   567    int AddIn_main(int isAppli, unsigned short OptionNum) {
    00001628              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    00001628 2FE6                   MOV.L       R14,@-R15
    0000162A 2FD6                   MOV.L       R13,@-R15
    0000162C 2FC6                   MOV.L       R12,@-R15
    0000162E 2FB6                   MOV.L       R11,@-R15
    00001630 2FA6                   MOV.L       R10,@-R15
    00001632 2F96                   MOV.L       R9,@-R15
    00001634 2F86                   MOV.L       R8,@-R15
    00001636 4F22                   STS.L       PR,@-R15
          WMCP.c   568        int selectedGroup;
          WMCP.c   569        char* buffer;
          WMCP.c   570    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   571        unsigned char conf[] = {0,5,0,0,0,0};
    00001638 D238                   MOV.L       L1411+4,R2 ; L865
    0000163A 7FF8                   ADD         #-8,R15
    0000163C D338                   MOV.L       L1411+8,R3 ; __slow_mvn
    0000163E 61F3                   MOV         R15,R1
    00001640 430B                   JSR         @R3
    00001642 E006                   MOV         #6,R0
          WMCP.c   572    
          WMCP.c   573        Serial_Open(conf);
    00001644 D137                   MOV.L       L1411+12,R1; _Serial_Open
    00001646 410B                   JSR         @R1
    00001648 64F3                   MOV         R15,R4
          WMCP.c   574    
          WMCP.c   575        initialization:
    0000164A              __$initialization$866:           ; label: initialization
          WMCP.c   576        Bdisp_AllClr_VRAM();
    0000164A DB37                   MOV.L       L1411+16,R11; _Bdisp_AllClr_VRAM
    0000164C 4B0B                   JSR         @R11
    0000164E 0009                   NOP
          WMCP.c   577        PrintXY(12, 1,  "Wireless  Message", 0);
    00001650 DE36                   MOV.L       L1411+20,R14; _PrintXY
    00001652 E700                   MOV         #0,R7
    00001654 D636                   MOV.L       L1411+24,R6; L867
    00001656 E501                   MOV         #1,R5
    00001658 4E0B                   JSR         @R14
    0000165A E40C                   MOV         #12,R4
          WMCP.c   578        PrintXY(0, 9,  "Communication Program", 0);
    0000165C D635                   MOV.L       L1411+28,R6; L868
    0000165E E509                   MOV         #9,R5
    00001660 E700                   MOV         #0,R7
    00001662 4E0B                   JSR         @R14
    00001664 6473                   MOV         R7,R4
          WMCP.c   579        Bdisp_DrawLineVRAM(0, 20, 127, 20);
    00001666 E714                   MOV         #20,R7
    00001668 D333                   MOV.L       L1411+32,R3; _Bdisp_DrawLineVRAM
    0000166A E67F                   MOV         #127,R6
    0000166C 6573                   MOV         R7,R5
    0000166E 430B                   JSR         @R3
    00001670 E400                   MOV         #0,R4
          WMCP.c   580        Bdisp_DrawLineVRAM(0, 52, 127, 52);
    00001672 E734                   MOV         #52,R7
    00001674 D230                   MOV.L       L1411+32,R2; _Bdisp_DrawLineVRAM
    00001676 E67F                   MOV         #127,R6
    00001678 6573                   MOV         R7,R5
    0000167A 420B                   JSR         @R2
    0000167C E400                   MOV         #0,R4
          WMCP.c   581        SaveDisp(SAVEDISP_PAGE1);
    0000167E D32F                   MOV.L       L1411+36,R3; _SaveDisp
    00001680 430B                   JSR         @R3
    00001682 E401                   MOV         #1,R4
          WMCP.c   582    
          WMCP.c   583        PrintXY(14, 33, "Initialization...", 0);
    00001684 D62E                   MOV.L       L1411+40,R6; L869
    00001686 E521                   MOV         #33,R5
    00001688 E700                   MOV         #0,R7
    0000168A 4E0B                   JSR         @R14
    0000168C E40E                   MOV         #14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   584        PrintMini(33,56, "[EXIT] to cancel", 0);
    0000168E E700                   MOV         #0,R7
    00001690 D62D                   MOV.L       L1411+48,R6; L870
    00001692 E538                   MOV         #56,R5
    00001694 DA2B                   MOV.L       L1411+44,R10; _PrintMini
    00001696 4A0B                   JSR         @R10
    00001698 E421                   MOV         #33,R4
          WMCP.c   585        Bdisp_PutDisp_DD();
    0000169A DC2C                   MOV.L       L1411+52,R12; _Bdisp_PutDisp_DD
    0000169C 4C0B                   JSR         @R12
    0000169E 0009                   NOP
          WMCP.c   586    
          WMCP.c   587        cooldown = 500;
    000016A0 DD2B                   MOV.L       L1411+56,R13; _cooldown
    000016A2 9239                   MOV.W       L1411,R2   ; H'01F4
    000016A4 D82B                   MOV.L       L1411+60,R8; _Sleep
    000016A6 D92C                   MOV.L       L1411+64,R9; _Serial_WriteByte
          WMCP.c   588        while (cooldown && Serial_ReadByte(&readLength) == 1) {
    000016A8 A011                   BRA         L1356
    000016AA 2D22                   MOV.L       R2,@R13
    000016AC              L1357:                            
          WMCP.c   589            if (IsKeyDown(KEY_CTRL_EXIT)) { return; }
    000016AC D22B                   MOV.L       L1411+68,R2; _KeyDown
    000016AE 420B                   JSR         @R2
    000016B0 E42F                   MOV         #47,R4
    000016B2 600C                   EXTU.B      R0,R0
    000016B4 2008                   TST         R0,R0
    000016B6 8901                   BT          L1412
    000016B8 A0A9                   BRA         L1359
    000016BA 0009                   NOP
    000016BC              L1412:                            
          WMCP.c   590            cooldown--;
    000016BC 62D2                   MOV.L       @R13,R2
    000016BE 72FF                   ADD         #-1,R2
    000016C0 2D22                   MOV.L       R2,@R13
          WMCP.c   591            Serial_WriteByte(1);
    000016C2 490B                   JSR         @R9
    000016C4 E401                   MOV         #1,R4
          WMCP.c   592            Serial_WriteByte(0x10);
    000016C6 490B                   JSR         @R9
    000016C8 E410                   MOV         #16,R4
          WMCP.c   593            Sleep(10);
    000016CA 480B                   JSR         @R8
    000016CC E40A                   MOV         #10,R4
    000016CE              L1356:                            
    000016CE 63D2                   MOV.L       @R13,R3
    000016D0 2338                   TST         R3,R3
    000016D2 8905                   BT          L1360
    000016D4 D422                   MOV.L       L1411+72,R4; _readLength
    000016D6 D323                   MOV.L       L1411+76,R3; _Serial_ReadByte
    000016D8 430B                   JSR         @R3
    000016DA 0009                   NOP
    000016DC 8801                   CMP/EQ      #1,R0
    000016DE 89E5                   BT          L1357
    000016E0              L1360:                            
          WMCP.c   594        }
          WMCP.c   595        if (cooldown) { Serial_ReadBytes(readBuffer, readLength, &size); }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016E0 D821                   MOV.L       L1411+80,R8; _readBuffer
    000016E2 63D2                   MOV.L       @R13,R3
    000016E4 2338                   TST         R3,R3
    000016E6 8905                   BT          L1361
    000016E8 D620                   MOV.L       L1411+84,R6; _size
    000016EA D31D                   MOV.L       L1411+72,R3; _readLength
    000016EC D220                   MOV.L       L1411+88,R2; _Serial_ReadBytes
    000016EE 6530                   MOV.B       @R3,R5
    000016F0 420B                   JSR         @R2
    000016F2 6482                   MOV.L       @R8,R4
    000016F4              L1361:                            
          WMCP.c   596    
          WMCP.c   597        if (readBuffer[0] != 0x11) {
    000016F4 D91F                   MOV.L       L1411+92,R9; _key
    000016F6 6082                   MOV.L       @R8,R0
    000016F8 6000                   MOV.B       @R0,R0
    000016FA 8811                   CMP/EQ      #17,R0
    000016FC 896B                   BT          L1362
    000016FE              L1364:                            
          WMCP.c   598            while (1) {
          WMCP.c   599                Bdisp_AllClr_VRAM();
    000016FE 4B0B                   JSR         @R11
    00001700 0009                   NOP
          WMCP.c   600                RestoreDisp(SAVEDISP_PAGE1);
    00001702 D31D                   MOV.L       L1411+96,R3; _RestoreDisp
    00001704 430B                   JSR         @R3
    00001706 E401                   MOV         #1,R4
          WMCP.c   601                if (cooldown == 0) { PrintXY(30, 33, "No response", 0); }
    00001708 62D2                   MOV.L       @R13,R2
    0000170A 2228                   TST         R2,R2
    0000170C 8B38                   BF          L1365
    0000170E E700                   MOV         #0,R7
    00001710 D61A                   MOV.L       L1411+100,R6; L877
    00001712 E521                   MOV         #33,R5
    00001714 A042                   BRA         L1380
    00001716 E41E                   MOV         #30,R4
    00001718              L1411:                            
    00001718 01F4                   .DATA.W     H'01F4
    0000171A 0000                   .DATA.W     0
    0000171C <00000000>             .DATA.L     L865
    00001720 <00000000>             .DATA.L     __slow_mvn
    00001724 <00000000>             .DATA.L     _Serial_Open
    00001728 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    0000172C <00000000>             .DATA.L     _PrintXY
    00001730 <00000000>             .DATA.L     L867
    00001734 <00000000>             .DATA.L     L868
    00001738 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    0000173C <00000000>             .DATA.L     _SaveDisp
    00001740 <00000000>             .DATA.L     L869
    00001744 <00000000>             .DATA.L     _PrintMini
    00001748 <00000000>             .DATA.L     L870
    0000174C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001750 <00000000>             .DATA.L     _cooldown
    00001754 <00000000>             .DATA.L     _Sleep
    00001758 <00000000>             .DATA.L     _Serial_WriteByte
    0000175C <00000000>             .DATA.L     _KeyDown
    00001760 <00000000>             .DATA.L     _readLength




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001764 <00000000>             .DATA.L     _Serial_ReadByte
    00001768 <00000000>             .DATA.L     _readBuffer
    0000176C <00000000>             .DATA.L     _size
    00001770 <00000000>             .DATA.L     _Serial_ReadBytes
    00001774 <00000000>             .DATA.L     _key
    00001778 <00000000>             .DATA.L     _RestoreDisp
    0000177C <00000000>             .DATA.L     L877
    00001780              L1365:                            
          WMCP.c   602                else {
          WMCP.c   603                    PrintXY(15, 33, "Error code :", 0);
    00001780 D628                   MOV.L       L1413+2,R6 ; L879
    00001782 E521                   MOV         #33,R5
    00001784 E700                   MOV         #0,R7
    00001786 4E0B                   JSR         @R14
    00001788 E40F                   MOV         #15,R4
          WMCP.c   604                    itoa(readBuffer[0], buffer);
    0000178A 65F3                   MOV         R15,R5
    0000178C 6482                   MOV.L       @R8,R4
    0000178E D326                   MOV.L       L1413+6,R3 ; _itoa
    00001790 430B                   JSR         @R3
    00001792 6440                   MOV.B       @R4,R4
          WMCP.c   605                    PrintXY(93, 33, (const unsigned char*)buffer, 0);
    00001794 E700                   MOV         #0,R7
    00001796 66F3                   MOV         R15,R6
    00001798 E521                   MOV         #33,R5
    0000179A E45D                   MOV         #93,R4
    0000179C              L1380:                            
    0000179C 4E0B                   JSR         @R14
    0000179E 0009                   NOP
          WMCP.c   606                }
          WMCP.c   607                PrintMini(3,56, "[F1] retry", 0);
    000017A0 D622                   MOV.L       L1413+10,R6; L880
    000017A2 E538                   MOV         #56,R5
    000017A4 E700                   MOV         #0,R7
    000017A6 4A0B                   JSR         @R10
    000017A8 E403                   MOV         #3,R4
          WMCP.c   608                PrintMini(74,56, "[EXIT] cancel", 0);
    000017AA E700                   MOV         #0,R7
    000017AC D620                   MOV.L       L1413+14,R6; L881
    000017AE E538                   MOV         #56,R5
    000017B0 4A0B                   JSR         @R10
    000017B2 E44A                   MOV         #74,R4
          WMCP.c   609                Bdisp_PutDisp_DD();
    000017B4 4C0B                   JSR         @R12
    000017B6 0009                   NOP
          WMCP.c   610                GetKey(&key);
    000017B8 D41E                   MOV.L       L1413+18,R4; _key
    000017BA D21F                   MOV.L       L1413+22,R2; _GetKeyMod
    000017BC 420B                   JSR         @R2
    000017BE 0009                   NOP
    000017C0 6092                   MOV.L       @R9,R0
    000017C2 882F                   CMP/EQ      #47,R0
    000017C4 8D20                   BT/S        L1370
    000017C6 6403                   MOV         R0,R4
          WMCP.c   611                if (key == KEY_CTRL_EXIT) { break; }
          WMCP.c   612                if (key == KEY_CTRL_F1) { goto initialization; }
    000017C8 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017CA 884F                   CMP/EQ      #79,R0
    000017CC 8B01                   BF          L1414
    000017CE AF3C                   BRA         __$initialization$866
    000017D0 0009                   NOP
    000017D2              L1414:                            
    000017D2 AF94                   BRA         L1364
    000017D4 0009                   NOP
    000017D6              L1362:                            
          WMCP.c   613            }
          WMCP.c   614        }
          WMCP.c   615        else {
          WMCP.c   616            selectedGroup = handleMainMenu();
    000017D6 BC00                   BSR         _handleMainMenu
    000017D8 0009                   NOP
    000017DA 6D03                   MOV         R0,R13
          WMCP.c   617            if (selectedGroup >= 0) {
    000017DC 4D11                   CMP/PZ      R13
    000017DE 8B13                   BF          L1370
    000017E0              L1373:                            
          WMCP.c   618                while (1) {
          WMCP.c   619                    Bdisp_AllClr_VRAM();
    000017E0 4B0B                   JSR         @R11
    000017E2 0009                   NOP
          WMCP.c   620                    itoa(selectedGroup, buffer);
    000017E4 D310                   MOV.L       L1413+6,R3 ; _itoa
    000017E6 65F3                   MOV         R15,R5
    000017E8 430B                   JSR         @R3
    000017EA 64D3                   MOV         R13,R4
          WMCP.c   621                    PrintXY(0, 0, buffer, 0);
    000017EC E700                   MOV         #0,R7
    000017EE 66F3                   MOV         R15,R6
    000017F0 6573                   MOV         R7,R5
    000017F2 4E0B                   JSR         @R14
    000017F4 6473                   MOV         R7,R4
          WMCP.c   622                    Bdisp_PutDisp_DD();
    000017F6 4C0B                   JSR         @R12
    000017F8 0009                   NOP
          WMCP.c   623                    GetKey(&key);
    000017FA D40E                   MOV.L       L1413+18,R4; _key
    000017FC D20E                   MOV.L       L1413+22,R2; _GetKeyMod
    000017FE 420B                   JSR         @R2
    00001800 0009                   NOP
          WMCP.c   624                    if (key == KEY_CTRL_EXIT) { break; }
    00001802 6092                   MOV.L       @R9,R0
    00001804 882F                   CMP/EQ      #47,R0
    00001806 8BEB                   BF          L1373
    00001808              L1370:                            
          WMCP.c   625                }
          WMCP.c   626            }
          WMCP.c   627        }
          WMCP.c   628    
          WMCP.c   629        Serial_Close(0);
    00001808 D30C                   MOV.L       L1413+26,R3; _Serial_Close
    0000180A 430B                   JSR         @R3
    0000180C E400                   MOV         #0,R4
          WMCP.c   630    
          WMCP.c   631        return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          WMCP.c   632    }
    0000180E              L1359:                            
    0000180E 7F08                   ADD         #8,R15
    00001810 4F26                   LDS.L       @R15+,PR
    00001812 68F6                   MOV.L       @R15+,R8
    00001814 69F6                   MOV.L       @R15+,R9
    00001816 6AF6                   MOV.L       @R15+,R10
    00001818 6BF6                   MOV.L       @R15+,R11
    0000181A 6CF6                   MOV.L       @R15+,R12
    0000181C 6DF6                   MOV.L       @R15+,R13
    0000181E 000B                   RTS
    00001820 6EF6                   MOV.L       @R15+,R14
    00001822              L1413:                            
    00001822 0000                   .DATA.W     0
    00001824 <00000000>             .DATA.L     L879
    00001828 <00000000>             .DATA.L     _itoa
    0000182C <00000000>             .DATA.L     L880
    00001830 <00000000>             .DATA.L     L881
    00001834 <00000000>             .DATA.L     _key
    00001838 <00000000>             .DATA.L     _GetKeyMod
    0000183C <00000000>             .DATA.L     _Serial_Close
          WMCP.c   633    
          WMCP.c   634    //****************************************************************************
          WMCP.c   635    //**************                 Notice!                      ****************
          WMCP.c   636    //**************  Please do not change the following source.  ****************
          WMCP.c   637    //****************************************************************************
          WMCP.c   638    
          WMCP.c   639    #pragma section _BR_Size
          WMCP.c   640    unsigned long BR_Size;
          WMCP.c   641    #pragma section
          WMCP.c   642    #pragma section _TOP
          WMCP.c   643    int InitializeSystem(int isAppli, unsigned short OptionNum) { return INIT_ADDIN_APPLICATION(isAppli, Optio
                         +nNum); }
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
    00000000 D301                   MOV.L       L1415+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1415:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
          WMCP.c   644    #pragma section
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _filledActionButtonBg:           ; static: filledActionButtonBg
    00000010 0001010101             .DATA.B     H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010001 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             010101       
    00000095              _actionButtonBg:                 ; static: actionButtonBg
    00000095 0001010101             .DATA.B     H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000000000   
             0000000000   
             000001       
    0000011A              _cancelIcon:                     ; static: cancelIcon
    0000011A 0100000001             .DATA.B     H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0001000100 +                       H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01
             0000010000   
             0001000100   
             0100000001   
    00000133              _confirmIcon:                    ; static: confirmIcon
    00000133 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'00
             0100010000   
             0001000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000147              _proceedIcon:                    ; static: proceedIcon
    00000147 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,
             0000010000 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'00
             0101010101   
             0101000000   
             0001000000   
             0000010000   
    0000016A              _characterSelectionIcon:         ; static: characterSelectionIcon
    0000016A 0001010001             .DATA.B     H'00,H'01,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'01,
             0001000001 +                       H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'01,H'00,
             0000010100 +                       H'00,H'00,H'01,H'01,H'01,H'00,H'01,H'01,H'01,H'00,H'01,H'01,H'00,H'01,H'00,H'00,
             0100000001 +                       H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'01,H'00,
             0001000100 +                       H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01
             0100010001   
             0100000001   
             0101000101   
             0100010100   
             0100000001   
             0001000100   
             0100010001   
             0001010001   
             0001000100   
             0100010001   
    000001B5              _uppercaseToLowercaseIcon:       ; static: uppercaseToLowercaseIcon
    000001B5 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000100 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'01,H'01,H'01,H'00,H'01,
             0100010000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'01,H'00,H'01,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01
             0000000001   
             0101010001   
             0101010101   
             0100000101   
             0100010000   
             0100000001   
             0000010001   
             0100010000   
             0001000100   
             0000000101   
    00000200              L471:
    00000200 30                     .SDATA      "0"
    00000201 00                     .DATA.B     H'00
    00000202 00000002               .RES.W      1
    00000204              L473:
    00000204 31                     .SDATA      "1"
    00000205 00                     .DATA.B     H'00
    00000206 00000002               .RES.W      1
    00000208              L475:
    00000208 32                     .SDATA      "2"
    00000209 00                     .DATA.B     H'00
    0000020A 00000002               .RES.W      1
    0000020C              L477:
    0000020C 33                     .SDATA      "3"
    0000020D 00                     .DATA.B     H'00
    0000020E 00000002               .RES.W      1
    00000210              L479:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000210 34                     .SDATA      "4"
    00000211 00                     .DATA.B     H'00
    00000212 00000002               .RES.W      1
    00000214              L481:
    00000214 35                     .SDATA      "5"
    00000215 00                     .DATA.B     H'00
    00000216 00000002               .RES.W      1
    00000218              L483:
    00000218 36                     .SDATA      "6"
    00000219 00                     .DATA.B     H'00
    0000021A 00000002               .RES.W      1
    0000021C              L485:
    0000021C 37                     .SDATA      "7"
    0000021D 00                     .DATA.B     H'00
    0000021E 00000002               .RES.W      1
    00000220              L487:
    00000220 38                     .SDATA      "8"
    00000221 00                     .DATA.B     H'00
    00000222 00000002               .RES.W      1
    00000224              L489:
    00000224 39                     .SDATA      "9"
    00000225 00                     .DATA.B     H'00
    00000226 00000002               .RES.W      1
    00000228              L491:
    00000228 2E                     .SDATA      "."
    00000229 00                     .DATA.B     H'00
    0000022A 00000002               .RES.W      1
    0000022C              L493:
    0000022C 0F00                   .DATA.B     H'0F,H'00
    0000022E 00000002               .RES.W      1
    00000230              L495:
    00000230 8700                   .DATA.B     H'87,H'00
    00000232 00000002               .RES.W      1
    00000234              L497:
    00000234 2B                     .SDATA      "+"
    00000235 00                     .DATA.B     H'00
    00000236 00000002               .RES.W      1
    00000238              L499:
    00000238 2D                     .SDATA      "-"
    00000239 00                     .DATA.B     H'00
    0000023A 00000002               .RES.W      1
    0000023C              L501:
    0000023C A900                   .DATA.B     H'A9,H'00
    0000023E 00000002               .RES.W      1
    00000240              L503:
    00000240 B900                   .DATA.B     H'B9,H'00
    00000242 00000002               .RES.W      1
    00000244              L505:
    00000244 2F                     .SDATA      "/"
    00000245 00                     .DATA.B     H'00
    00000246 00000002               .RES.W      1
    00000248              L507:
    00000248 28                     .SDATA      "("
    00000249 00                     .DATA.B     H'00
    0000024A 00000002               .RES.W      1
    0000024C              L509:
    0000024C 29                     .SDATA      ")"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024D 00                     .DATA.B     H'00
    0000024E 00000002               .RES.W      1
    00000250              L511:
    00000250 2C                     .SDATA      ","
    00000251 00                     .DATA.B     H'00
    00000252 00000002               .RES.W      1
    00000254              L513:
    00000254 E69100                 .DATA.B     H'E6,H'91,H'00
    00000257 00000001               .RES.B      1
    00000258              L515:
    00000258 58                     .SDATA      "X"
    00000259 00                     .DATA.B     H'00
    0000025A 00000002               .RES.W      1
    0000025C              L517:
    0000025C E5C200                 .DATA.B     H'E5,H'C2,H'00
    0000025F 00000001               .RES.B      1
    00000260              L519:
    00000260 5E                     .SDATA      "^"
    00000261 00                     .DATA.B     H'00
    00000262 00000002               .RES.W      1
    00000264              L522:
    00000264 7F                     .DATA.B     H'7F
    00000265 50                     .SDATA      "P"
    00000266 00                     .DATA.B     H'00
    00000267 00000001               .RES.B      1
    00000268              L524:
    00000268 3D                     .SDATA      "="
    00000269 00                     .DATA.B     H'00
    0000026A 00000002               .RES.W      1
    0000026C              L526:
    0000026C E6                     .DATA.B     H'E6
    0000026D 4F                     .SDATA      "O"
    0000026E 00                     .DATA.B     H'00
    0000026F 00000001               .RES.B      1
    00000270              L528:
    00000270 5B                     .SDATA      "["
    00000271 00                     .DATA.B     H'00
    00000272 00000002               .RES.W      1
    00000274              L530:
    00000274 5D                     .SDATA      "]"
    00000275 00                     .DATA.B     H'00
    00000276 00000002               .RES.W      1
    00000278              L532:
    00000278 7B                     .SDATA      "{"
    00000279 00                     .DATA.B     H'00
    0000027A 00000002               .RES.W      1
    0000027C              L534:
    0000027C 7D                     .SDATA      "}"
    0000027D 00                     .DATA.B     H'00
    0000027E 00000002               .RES.W      1
    00000280              L536:
    00000280 E5CA00                 .DATA.B     H'E5,H'CA,H'00
    00000283 00000001               .RES.B      1
    00000284              L538:
    00000284 7F                     .DATA.B     H'7F
    00000285 54                     .SDATA      "T"
    00000286 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000287 00000001               .RES.B      1
    00000288              L540:
    00000288 E6                     .DATA.B     H'E6
    00000289 65                     .SDATA      "e"
    0000028A 00                     .DATA.B     H'00
    0000028B 00000001               .RES.B      1
    0000028C              L542:
    0000028C 8600                   .DATA.B     H'86,H'00
    0000028E 00000002               .RES.W      1
    00000290              L546:
    00000290 5A                     .SDATA      "Z"
    00000291 00                     .DATA.B     H'00
    00000292 00000002               .RES.W      1
    00000294              L548:
    00000294 7A                     .SDATA      "z"
    00000295 00                     .DATA.B     H'00
    00000296 00000002               .RES.W      1
    00000298              L551:
    00000298 55                     .SDATA      "U"
    00000299 00                     .DATA.B     H'00
    0000029A 00000002               .RES.W      1
    0000029C              L553:
    0000029C 75                     .SDATA      "u"
    0000029D 00                     .DATA.B     H'00
    0000029E 00000002               .RES.W      1
    000002A0              L556:
    000002A0 56                     .SDATA      "V"
    000002A1 00                     .DATA.B     H'00
    000002A2 00000002               .RES.W      1
    000002A4              L558:
    000002A4 76                     .SDATA      "v"
    000002A5 00                     .DATA.B     H'00
    000002A6 00000002               .RES.W      1
    000002A8              L561:
    000002A8 57                     .SDATA      "W"
    000002A9 00                     .DATA.B     H'00
    000002AA 00000002               .RES.W      1
    000002AC              L563:
    000002AC 77                     .SDATA      "w"
    000002AD 00                     .DATA.B     H'00
    000002AE 00000002               .RES.W      1
    000002B0              L566:
    000002B0 50                     .SDATA      "P"
    000002B1 00                     .DATA.B     H'00
    000002B2 00000002               .RES.W      1
    000002B4              L568:
    000002B4 70                     .SDATA      "p"
    000002B5 00                     .DATA.B     H'00
    000002B6 00000002               .RES.W      1
    000002B8              L571:
    000002B8 51                     .SDATA      "Q"
    000002B9 00                     .DATA.B     H'00
    000002BA 00000002               .RES.W      1
    000002BC              L573:
    000002BC 71                     .SDATA      "q"
    000002BD 00                     .DATA.B     H'00
    000002BE 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002C0              L576:
    000002C0 52                     .SDATA      "R"
    000002C1 00                     .DATA.B     H'00
    000002C2 00000002               .RES.W      1
    000002C4              L578:
    000002C4 72                     .SDATA      "r"
    000002C5 00                     .DATA.B     H'00
    000002C6 00000002               .RES.W      1
    000002C8              L581:
    000002C8 4D                     .SDATA      "M"
    000002C9 00                     .DATA.B     H'00
    000002CA 00000002               .RES.W      1
    000002CC              L583:
    000002CC 6D                     .SDATA      "m"
    000002CD 00                     .DATA.B     H'00
    000002CE 00000002               .RES.W      1
    000002D0              L586:
    000002D0 4E                     .SDATA      "N"
    000002D1 00                     .DATA.B     H'00
    000002D2 00000002               .RES.W      1
    000002D4              L588:
    000002D4 6E                     .SDATA      "n"
    000002D5 00                     .DATA.B     H'00
    000002D6 00000002               .RES.W      1
    000002D8              L591:
    000002D8 4F                     .SDATA      "O"
    000002D9 00                     .DATA.B     H'00
    000002DA 00000002               .RES.W      1
    000002DC              L593:
    000002DC 6F                     .SDATA      "o"
    000002DD 00                     .DATA.B     H'00
    000002DE 00000002               .RES.W      1
    000002E0              L595:
    000002E0 20                     .SDATA      " "
    000002E1 00                     .DATA.B     H'00
    000002E2 00000002               .RES.W      1
    000002E4              L597:
    000002E4 22                     .SDATA      """"
    000002E5 00                     .DATA.B     H'00
    000002E6 00000002               .RES.W      1
    000002E8              L601:
    000002E8 78                     .SDATA      "x"
    000002E9 00                     .DATA.B     H'00
    000002EA 00000002               .RES.W      1
    000002EC              L604:
    000002EC 59                     .SDATA      "Y"
    000002ED 00                     .DATA.B     H'00
    000002EE 00000002               .RES.W      1
    000002F0              L606:
    000002F0 79                     .SDATA      "y"
    000002F1 00                     .DATA.B     H'00
    000002F2 00000002               .RES.W      1
    000002F4              L609:
    000002F4 53                     .SDATA      "S"
    000002F5 00                     .DATA.B     H'00
    000002F6 00000002               .RES.W      1
    000002F8              L611:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F8 73                     .SDATA      "s"
    000002F9 00                     .DATA.B     H'00
    000002FA 00000002               .RES.W      1
    000002FC              L614:
    000002FC 54                     .SDATA      "T"
    000002FD 00                     .DATA.B     H'00
    000002FE 00000002               .RES.W      1
    00000300              L616:
    00000300 74                     .SDATA      "t"
    00000301 00                     .DATA.B     H'00
    00000302 00000002               .RES.W      1
    00000304              L619:
    00000304 47                     .SDATA      "G"
    00000305 00                     .DATA.B     H'00
    00000306 00000002               .RES.W      1
    00000308              L621:
    00000308 67                     .SDATA      "g"
    00000309 00                     .DATA.B     H'00
    0000030A 00000002               .RES.W      1
    0000030C              L624:
    0000030C 48                     .SDATA      "H"
    0000030D 00                     .DATA.B     H'00
    0000030E 00000002               .RES.W      1
    00000310              L626:
    00000310 68                     .SDATA      "h"
    00000311 00                     .DATA.B     H'00
    00000312 00000002               .RES.W      1
    00000314              L629:
    00000314 49                     .SDATA      "I"
    00000315 00                     .DATA.B     H'00
    00000316 00000002               .RES.W      1
    00000318              L631:
    00000318 69                     .SDATA      "i"
    00000319 00                     .DATA.B     H'00
    0000031A 00000002               .RES.W      1
    0000031C              L634:
    0000031C 4A                     .SDATA      "J"
    0000031D 00                     .DATA.B     H'00
    0000031E 00000002               .RES.W      1
    00000320              L636:
    00000320 6A                     .SDATA      "j"
    00000321 00                     .DATA.B     H'00
    00000322 00000002               .RES.W      1
    00000324              L639:
    00000324 4B                     .SDATA      "K"
    00000325 00                     .DATA.B     H'00
    00000326 00000002               .RES.W      1
    00000328              L641:
    00000328 6B                     .SDATA      "k"
    00000329 00                     .DATA.B     H'00
    0000032A 00000002               .RES.W      1
    0000032C              L644:
    0000032C 4C                     .SDATA      "L"
    0000032D 00                     .DATA.B     H'00
    0000032E 00000002               .RES.W      1
    00000330              L646:
    00000330 6C                     .SDATA      "l"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000331 00                     .DATA.B     H'00
    00000332 00000002               .RES.W      1
    00000334              L649:
    00000334 41                     .SDATA      "A"
    00000335 00                     .DATA.B     H'00
    00000336 00000002               .RES.W      1
    00000338              L651:
    00000338 61                     .SDATA      "a"
    00000339 00                     .DATA.B     H'00
    0000033A 00000002               .RES.W      1
    0000033C              L654:
    0000033C 42                     .SDATA      "B"
    0000033D 00                     .DATA.B     H'00
    0000033E 00000002               .RES.W      1
    00000340              L656:
    00000340 62                     .SDATA      "b"
    00000341 00                     .DATA.B     H'00
    00000342 00000002               .RES.W      1
    00000344              L659:
    00000344 43                     .SDATA      "C"
    00000345 00                     .DATA.B     H'00
    00000346 00000002               .RES.W      1
    00000348              L661:
    00000348 63                     .SDATA      "c"
    00000349 00                     .DATA.B     H'00
    0000034A 00000002               .RES.W      1
    0000034C              L664:
    0000034C 44                     .SDATA      "D"
    0000034D 00                     .DATA.B     H'00
    0000034E 00000002               .RES.W      1
    00000350              L666:
    00000350 64                     .SDATA      "d"
    00000351 00                     .DATA.B     H'00
    00000352 00000002               .RES.W      1
    00000354              L669:
    00000354 45                     .SDATA      "E"
    00000355 00                     .DATA.B     H'00
    00000356 00000002               .RES.W      1
    00000358              L671:
    00000358 65                     .SDATA      "e"
    00000359 00                     .DATA.B     H'00
    0000035A 00000002               .RES.W      1
    0000035C              L674:
    0000035C 46                     .SDATA      "F"
    0000035D 00                     .DATA.B     H'00
    0000035E 00000002               .RES.W      1
    00000360              L676:
    00000360 66                     .SDATA      "f"
    00000361 00                     .DATA.B     H'00
    00000362 00000002               .RES.W      1
    00000364              L678:
    00000364 CD00                   .DATA.B     H'CD,H'00
    00000366 00000002               .RES.W      1
    00000368              L680:
    00000368 E6                     .DATA.B     H'E6
    00000369 47                     .SDATA      "G"
    0000036A 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000036B 00000001               .RES.B      1
    0000036C              L681:
    0000036C 00                     .DATA.B     H'00
    0000036D              L685:
    0000036D 0001000101             .DATA.B     H'00,H'01,H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'01,H'01
             0000010000   
             0100010101   
    0000037C              L687:
    0000037C 0101010000             .DATA.B     H'01,H'01,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'01,H'01,H'01
             0101010101   
             0000010101   
    0000038B              L689:
    0000038B 0101010000             .DATA.B     H'01,H'01,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'00,H'00,H'01,H'01,H'01,H'01
             0101010100   
             0001010101   
    0000039A              L691:
    0000039A 0100010100             .DATA.B     H'01,H'00,H'01,H'01,H'00,H'01,H'01,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'01
             0101010100   
             0001000001   
    000003A9 00000001               .RES.B      1
    000003AA 00000002               .RES.W      1
    000003AC              L693:
    000003AC <00000000>             .DATA.L     L649,L654,L659,L664,L669,L674,L619,L624,L629,L634,L639,L644,L581,L586,L591,L566,
             <00000000> +                       L571,L576,L609,L614,L551,L556,L561,L515,L604,L546,L651,L656,L661,L666,L671,L676,
             <00000000> +                       L621,L626,L631,L636,L641,L646,L583,L588,L593,L568,L573,L578,L611,L616,L553,L558,
             <00000000> +                       L563,L601,L606,L548,L471,L473,L475,L477,L479,L481,L483,L485,L487,L489,L595,L511,
             <00000000> +                       L491,L694,L695,L696,L697,L597,L698,L699,L700,L701,L702,L505,L703,L703,L703,L703,
             <00000000> +                       L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,
             <00000000> +                       L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,L703,
             <00000000> +                       L703,L703,L703,L703,L703,L703,L703,L703
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    0000058C 000005A001             .DATAB.B    1440,0
             00           
    00000B2C              L710:
    00000B2C 4368617261             .SDATA      "Character selection"
             6374657220   
             73656C6563   
             74696F6E     
    00000B3F 00                     .DATA.B     H'00
    00000B40              L741:
    00000B40 0101010101             .DATA.B     H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01
             0101010101   
             01010101     
    00000B4E              L743:
    00000B4E 0000010100             .DATA.B     H'00,H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010000 +                       H'00,H'01,H'01
             0000000100   
             0001010000   
             0100000001   
             0101000101   
    00000B71              L745:
    00000B71 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0001000100 +                       H'01,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0001010100 +                       H'00,H'01,H'01
             0001000100   
             0001000100   
             0100000001   
             0101000101   
    00000B94              L747:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B94 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000100 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010100 +                       H'00,H'01,H'01
             0001000100   
             0000010100   
             0100000001   
             0101000101   
    00000BB7 00000001               .RES.B      1
    00000BB8              L770:
    00000BB8 6D61782020             .SDATA      "max    char"
             2020636861   
             72           
    00000BC3 00                     .DATA.B     H'00
    00000BC4              L794:
    00000BC4 0001010101             .DATA.B     H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101000101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C98 0101010101             .DATA.B     H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101         
    00000D6C 0101010101             .DATA.B     H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0101010101   
             0101010101   
             0001010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             0101010101   
             010100       
    00000DFB              L796:
    00000DFB 0101010101             .DATA.B     H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000001 +                       H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000100 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000101 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01
             0001010101   
             0100000000   
             0000000000   
             0101000001   
             0000000100   
             0001010000   
             0001000100   
             0000010100   
             0000000100   
             0000000101   
             0000000100   
             0100000001   
             0100000100   
             0000010000   
             0101000000   
             0000000000   
             0001010000   
             0000000000   
             0000010101   
             0101010101   
             01010101     
    00000E95              L798:
    00000E95 0001000100             .DATA.B     H'00,H'01,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'00,H'01,H'01,H'00,H'01,H'01,H'00,
             0001010100 +                       H'01,H'01,H'01,H'00,H'00,H'01,H'00,H'01,H'00
             0101000101   
             0001010100   
             0001000100   
    00000EAE              L800:
    00000EAE 0101010000             .DATA.B     H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'01,
             0001010000 +                       H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'00
             0100010001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000001   
             0001010100   
    00000EC7              L802:
    00000EC7 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,
             0000000001 +                       H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'01,
             0101000000 +                       H'01,H'01,H'01
             0101010000   
             0001000100   
             0000000101   
             0001010101   
    00000EEA              L804:
    00000EEA 0000010100             .DATA.B     H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'00,H'01,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01
             0100010101   
             010101       
    00000EFC              L806:
    00000EFC 0101010101             .DATA.B     H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,
             0100010101 +                       H'00,H'00
             0100000001   
             010000       
    00000F0E              L808:
    00000F0E 0001000101             .DATA.B     H'00,H'01,H'00,H'01,H'01,H'01
             01           
    00000F14              L810:
    00000F14 0101010001             .DATA.B     H'01,H'01,H'01,H'00,H'01,H'00
             00           
    00000F1A              L821:
    00000F1A 4572726F72             .SDATA      "Error #404"
             2023343034   
    00000F24 00                     .DATA.B     H'00
    00000F25 0000000A01             .DATAB.B    10,0
             00           
    00000F2F 4572726F72             .SDATA      "Error #404"
             2023343034   
    00000F39 00                     .DATA.B     H'00
    00000F3A 0000000A01             .DATAB.B    10,0
             00           
    00000F44 4572726F72             .SDATA      "Error #404"
             2023343034   
    00000F4E 00                     .DATA.B     H'00
    00000F4F 0000000A01             .DATAB.B    10,0
             00           
    00000F59 4572726F72             .SDATA      "Error #404"
             2023343034   
    00000F63 00                     .DATA.B     H'00
    00000F64 0000000A01             .DATAB.B    10,0
             00           
    00000F6E 00000002               .RES.W      1
    00000F70              L838:
    00000F70 4D65737361             .SDATA      "Messages"
             676573       
    00000F78 00                     .DATA.B     H'00
    00000F79 00000001               .RES.B      1
    00000F7A 00000002               .RES.W      1
    00000F7C              L847:
    00000F7C 4E6F206772             .SDATA      "No group found"
             6F75702066   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6F756E64     
    00000F8A 00                     .DATA.B     H'00
    00000F8B 00000001               .RES.B      1
    00000F8C              L855:
    00000F8C 4564697420             .SDATA      "Edit group name"
             67726F7570   
             206E616D65   
    00000F9B 00                     .DATA.B     H'00
    00000F9C              L865:
    00000F9C 0005000000             .DATA.B     H'00,H'05,H'00,H'00,H'00,H'00
             00           
    00000FA2 00000002               .RES.W      1
    00000FA4              L867:
    00000FA4 576972656C             .SDATA      "Wireless  Message"
             6573732020   
             4D65737361   
             6765         
    00000FB5 00                     .DATA.B     H'00
    00000FB6 00000002               .RES.W      1
    00000FB8              L868:
    00000FB8 436F6D6D75             .SDATA      "Communication Program"
             6E69636174   
             696F6E2050   
             726F677261   
             6D           
    00000FCD 00                     .DATA.B     H'00
    00000FCE 00000002               .RES.W      1
    00000FD0              L869:
    00000FD0 496E697469             .SDATA      "Initialization..."
             616C697A61   
             74696F6E2E   
             2E2E         
    00000FE1 00                     .DATA.B     H'00
    00000FE2 00000002               .RES.W      1
    00000FE4              L870:
    00000FE4 5B45584954             .SDATA      "[EXIT] to cancel"
             5D20746F20   
             63616E6365   
             6C           
    00000FF4 00                     .DATA.B     H'00
    00000FF5 00000001               .RES.B      1
    00000FF6 00000002               .RES.W      1
    00000FF8              L877:
    00000FF8 4E6F207265             .SDATA      "No response"
             73706F6E73   
             65           
    00001003 00                     .DATA.B     H'00
    00001004              L879:
    00001004 4572726F72             .SDATA      "Error code :"
             20636F6465   
             203A         
    00001010 00                     .DATA.B     H'00
    00001011 00000001               .RES.B      1
    00001012 00000002               .RES.W      1
    00001014              L880:
    00001014 5B46315D20             .SDATA      "[F1] retry"
             7265747279   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000101E 00                     .DATA.B     H'00
    0000101F 00000001               .RES.B      1
    00001020              L881:
    00001020 5B45584954             .SDATA      "[EXIT] cancel"
             5D2063616E   
             63656C       
    0000102D 00                     .DATA.B     H'00
    0000102E 00000002               .RES.W      1
    00001030              L694:
    00001030 3B                     .SDATA      ";"
    00001031 00                     .DATA.B     H'00
    00001032 00000002               .RES.W      1
    00001034              L695:
    00001034 3A                     .SDATA      ":"
    00001035 00                     .DATA.B     H'00
    00001036 00000002               .RES.W      1
    00001038              L696:
    00001038 21                     .SDATA      "!"
    00001039 00                     .DATA.B     H'00
    0000103A 00000002               .RES.W      1
    0000103C              L697:
    0000103C 3F                     .SDATA      "?"
    0000103D 00                     .DATA.B     H'00
    0000103E 00000002               .RES.W      1
    00001040              L698:
    00001040 27                     .SDATA      "'"
    00001041 00                     .DATA.B     H'00
    00001042 00000002               .RES.W      1
    00001044              L699:
    00001044 23                     .SDATA      "#"
    00001045 00                     .DATA.B     H'00
    00001046 00000002               .RES.W      1
    00001048              L700:
    00001048 26                     .SDATA      "&"
    00001049 00                     .DATA.B     H'00
    0000104A 00000002               .RES.W      1
    0000104C              L701:
    0000104C 24                     .SDATA      "$"
    0000104D 00                     .DATA.B     H'00
    0000104E 00000002               .RES.W      1
    00001050              L702:
    00001050 2A                     .SDATA      "*"
    00001051 00                     .DATA.B     H'00
    00001052 00000002               .RES.W      1
    00001054              L703:
    00001054 D800                   .DATA.B     H'D8,H'00
B   00000000              _key:                            ; static: key
    00000000 00000004               .RES.L      1
    00000004              _cooldown:                       ; static: cooldown
    00000004 00000004               .RES.L      1
    00000008              _size:                           ; static: size
    00000008 00000002               .RES.W      1
    0000000A              _readLength:                     ; static: readLength
    0000000A 00000001               .RES.B      1
    0000000B 00000001               .RES.B      1
    0000000C              _readBuffer:                     ; static: readBuffer
    0000000C 00000004               .RES.L      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1



























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Aug-2022 21:38:04  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        76




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      644



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001840 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               00001056 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000010 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000028B6 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           27
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          28
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           459






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\calli\AppData\Local\Temp\hmk3352.tmp 

